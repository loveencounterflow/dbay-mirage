{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/html.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-MIRAGE/HTML'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nGUY                       = require 'guy'\n{ SQL }                   = GUY.str\n{ HDML }                  = require 'hdml'\n{ lets\n  freeze\n  thaw }                  = GUY.lft\n{ HTMLISH }               = require './htmlish-parser'\n\n\n#===========================================================================================================\ntypes.declare 'constructor_cfg', tests:\n  \"@isa.object x\":                                    ( x ) -> @isa.object x\n  \"( @isa.object x.mrg ) or ( @isa.function x.mrg )\": ( x ) -> ( @isa.object x.mrg ) or ( @isa.function x.mrg )\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'mrg_parse_dsk_cfg', tests:\n  \"@isa.object x\":                                    ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.dsk\":                         ( x ) -> @isa.nonempty_text x.dsk\n\n\n#===========================================================================================================\nclass @Html\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: GUY.lft.freeze\n    defaults:\n      #.....................................................................................................\n      constructor_cfg:\n        mrg:              null\n        prefix:           null\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg      = { @constructor.C.defaults.constructor_cfg..., cfg..., }\n    GUY.props.hide @, 'types', types\n    @types.validate.constructor_cfg @cfg\n    { mrg, }  = GUY.obj.pluck_with_fallback @cfg, null, 'mrg'\n    GUY.props.hide @, 'mrg', mrg\n    GUY.props.hide @, 'HTMLISH', HTMLISH\n    @cfg      = GUY.lft.freeze @cfg\n    @_set_variables?()\n    @_create_sql_functions?()\n    @_procure_infrastructure?()\n    @_compile_statements?()\n    @_procure_infradata?()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _set_variables: ->\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    { prefix } = @cfg\n    #-------------------------------------------------------------------------------------------------------\n    @mrg.db.create_window_function\n      name:           \"#{prefix}_html_create_tag\"\n      varargs:        false\n      deterministic:  true\n      start:          null\n      step:           ( Σ, typ, tag, k, v, txt ) ->\n        Σ            ?= { typ, tag, atrs: {}, txt, }\n        Σ.atrs[ k ]   = v if k?\n        return Σ\n      inverse:        ( Σ, dropped ) -> return null unless Σ?; delete Σ.atrs[ k ]; Σ\n      result:         ( Σ ) ->\n        return '' unless Σ?\n        return switch Σ.typ\n          when 't' then HDML.escape_text Σ.txt\n          when 'r' then \"<!-- #{HDML.escape_text Σ.txt} -->\"\n          when 'b' then '\\n'\n          when 'e' then ( HDML.create_tag '<', 'error', Σ.atrs  ) + \\\n                        ( HDML.escape_text Σ.txt                ) + \\\n                        ( HDML.create_tag '>', 'error'          )\n          else HDML.create_tag Σ.typ, Σ.tag, Σ.atrs\n    #-------------------------------------------------------------------------------------------------------\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _procure_infrastructure: ->\n    ### TAINT skip if tables found ###\n    { prefix  } = @cfg\n    { db      } = @mrg\n    db.set_foreign_keys_state false\n    db SQL\"\"\"\n      drop  index if exists #{prefix}_html_mirror_tag_idx;\n      drop  view  if exists #{prefix}_html_tags_and_html;\n      drop  table if exists #{prefix}_html_tags;\n      drop  table if exists #{prefix}_html_typs;\n      drop  table if exists #{prefix}_html_atrs;\n      drop  table if exists #{prefix}_html_mirror;\n      drop  table if exists #{prefix}_html_atrids;\"\"\"\n    db.set_foreign_keys_state true\n    #-------------------------------------------------------------------------------------------------------\n    db SQL\"\"\"\n      create table #{prefix}_html_tags (\n          tag       text    not null primary key,\n          is_block  boolean not null default false,\n          is_empty  boolean not null default false,\n          syntax    text    not null default 'html' );\"\"\"\n    #-------------------------------------------------------------------------------------------------------\n    db SQL\"\"\"\n      create table #{prefix}_html_atrids (\n          atrid integer not null,\n        primary key ( atrid ),\n        check ( atrid > 0 and floor( atrid ) = atrid ) );\"\"\"\n    db SQL\"\"\"\n      create table #{prefix}_html_atrs (\n          atrid integer not null,\n          k     text    not null,\n          v     text    not null,\n        primary key ( atrid, k ),\n        foreign key ( atrid ) references #{prefix}_html_atrids,\n        check ( length( k ) > 0 ) )\n        strict;\"\"\"\n    db SQL\"\"\"\n      create table #{prefix}_html_typs (\n          typ   text not null,\n          name  text not null,\n          primary key ( typ ),\n          unique ( name ),\n          check ( length( typ  ) = 1 ),\n          check ( length( name ) > 0 ) );\"\"\"\n    db SQL\"\"\"\n      insert into #{prefix}_html_typs values\n          ( '<', 'otag'     ),\n          ( '>', 'ctag'     ),\n          ( '^', 'stag'     ),\n          ( 'b', 'blank'    ),\n          ( 't', 'text'     ),\n          ( 'r', 'comment'  ),\n          ( 'e', 'error'    );\"\"\"\n    db SQL\"\"\"\n      create table #{prefix}_html_mirror (\n          dsk     text    not null,                         -- data source key\n          oln     integer not null,                         -- original line nr (1-based)\n          col     integer not null,                         -- column where `txt` starts\n          trk     integer not null default 1,               -- track number\n          pce     integer not null default 1,               -- piece number\n          typ     text    not null,                         -- node type\n          tag     text,                                     -- null for texts, comments\n          atrid   integer,\n          -- act     boolean not null default 1,               -- true: active, false: deleted\n          txt     text,\n        primary key ( dsk, oln, trk, pce ),\n        foreign key ( dsk   ) references #{prefix}_datasources,\n        foreign key ( typ   ) references #{prefix}_html_typs,\n        foreign key ( atrid ) references #{prefix}_html_atrids,\n        check ( length( tag ) > 0 ) );\n      create index #{prefix}_html_mirror_tag_idx on #{prefix}_html_mirror ( tag );\"\"\"\n    db SQL\"\"\"\n      create view #{prefix}_html_tags_and_html as select distinct\n          t.dsk                                                               as dsk,\n          t.oln                                                               as oln,\n          t.col                                                               as col,\n          t.trk                                                               as trk,\n          t.pce                                                               as pce,\n          t.typ                                                               as typ,\n          t.tag                                                               as tag,\n          t.atrid                                                             as atrid,\n          #{prefix}_html_create_tag( t.typ, t.tag, a.k, a.v, t.txt ) over w   as html\n        from\n          #{prefix}_html_mirror as t\n          left join #{prefix}_html_atrs as a using ( atrid )\n        where true\n          and ( t.dsk = std_getv( 'dsk' ) )\n        window w as (\n          partition by t.dsk, t.oln, t.trk, t.pce\n          order by a.k\n          rows between unbounded preceding and unbounded following )\n        order by t.dsk, t.oln, t.trk, t.pce;\"\"\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _procure_infradata: ->\n    ### TAINT skip if tables found ###\n    { prefix      } = @cfg\n    { db          } = @mrg\n    { insert_tag  } = @statements\n    #.......................................................................................................\n    db =>\n      try\n        for d in ( require './data-html5-tags' ).tags\n          tag       = d.tag\n          is_empty  = if d.is_empty then 1 else 0\n          is_block  = if d.is_block then 1 else 0\n          syntax    = d.syntax ? 'html'\n          insert_tag.run { tag, is_empty, is_block, syntax, }\n      catch error\n        throw new db.E.DBay_internal_error '^mirage-html@1^', \\\n          \"when trying to insert #{rpr d}, an error occurred: #{error.message}\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_statements: ->\n    { prefix  } = @cfg\n    { db      } = @mrg\n    #.......................................................................................................\n    GUY.props.hide @, 'statements',\n      #.....................................................................................................\n      insert_atrid: db.prepare_insert {\n        into: \"#{prefix}_html_atrids\", returning: '*', exclude: [ 'atrid', ], }\n      #.....................................................................................................\n      ### NOTE we don't use `autoincrement` b/c this is the more general solution; details will change when\n      the VNR gets more realistic (dsk, linenr, ...) ###\n      insert_content: db.prepare SQL\"\"\"\n        with v1 as ( select\n            coalesce( max( pce ), 0 ) + 1 as pce\n          from #{prefix}_html_mirror\n          where true\n            and ( dsk = $dsk )\n            and ( oln = $oln )\n            and ( trk = $trk ) )\n        insert into #{prefix}_html_mirror ( dsk, oln, col, trk, pce, typ, tag, atrid, txt )\n          values ( $dsk, $oln, $col, $trk, ( select pce from v1 ), $typ, $tag, $atrid, $txt )\n          returning *;\"\"\"\n      #.....................................................................................................\n      insert_atr: db.prepare_insert { into: \"#{prefix}_html_atrs\", returning: null, }\n      insert_tag: db.prepare_insert { into: \"#{prefix}_html_tags\", returning: null, }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  render_dsk: ( cfg ) ->\n    { dsk     } = cfg\n    { db      } = @mrg\n    { prefix  } = @cfg\n    db.setv 'dsk', dsk\n    return ( db.all_first_values SQL\"select html from #{prefix}_html_tags_and_html;\" ).join ''\n\n  #---------------------------------------------------------------------------------------------------------\n  _append_tag: ( dsk, oln, col, trk, typ, tag, atrs = null, text = null ) ->\n    atrid = null\n    if atrs?\n      { atrid } = @mrg.db.first_row @statements.insert_atrid\n      for k, v of atrs\n        v = rpr v unless isa.text v\n        @statements.insert_atr.run { atrid, k, v, }\n    return @statements.insert_content.get { dsk, oln, col, trk, typ, tag, atrid, txt: text, }\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT consider to cache ###\n  _get_non_html_tags: -> new Set @mrg.db.all_first_values SQL\"\"\"\n    select * from #{@cfg.prefix}_html_tags where syntax != 'html';\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  parse_dsk: ( cfg ) ->\n    validate.mrg_parse_dsk_cfg ( cfg = { @constructor.C.defaults.mrg_parse_dsk_cfg..., cfg..., } )\n    { dsk } = cfg\n    #.......................................................................................................\n    @mrg.db.with_transaction =>\n      for { oln1, wslc, trk, txt, } from @mrg.walk_par_rows { dsk, }\n        tokens = @HTMLISH.parse txt, @_get_non_html_tags()\n        for d in tokens\n          debug '^383^', d\n          oln = oln1 + d.delta_lnr ? 0\n          col = d.col\n          switch d.$key\n            when '<tag'     then @_append_tag dsk, oln, col, trk, '<', d.name, d.atrs\n            when '>tag'     then @_append_tag dsk, oln, col, trk, '>', d.name, d.atrs\n            when '^tag'     then @_append_tag dsk, oln, col, trk, '^', d.name, d.atrs\n            when '^text'    then @_append_tag dsk, oln, col, trk, 't', null, null, d.text\n            when '^comment', '^doctype'\n              @_append_tag dsk, oln, col, trk, 'r', null, null, d.text.replace /^<!--\\s*(.*?)\\s*-->$/, '$1'\n            when '^error'\n              warn '^435345^', \"error #{rpr d}\"\n              atrs = { start: d.start, stop: d.stop, code: d.code, }\n              @_append_tag dsk, oln, col, trk, 'e', null, atrs, \"#{d.message}: #{rpr d.text}\"\n            else\n              warn '^435345^', \"unhandled token #{rpr d}\"\n              atrs  = { start: d.start, stop: d.stop, code: 'unhandled', }\n              d     = { $key: d.$key, name: d.name, type: d.type, }\n              @_append_tag dsk, oln, col, trk, 'e', null, atrs, \"unhandled token: #{rpr d}\"\n        for _ in [ 1 .. wslc + 1 ]\n          @_append_tag dsk, oln ? oln1, col ? 1, trk, 'b', null, null, '\\n'\n    return null\n\n\n\n\n\n"
  ]
}