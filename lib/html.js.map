{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/html.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-MIRAGE/HTML'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nGUY                       = require 'guy'\n{ SQL }                   = GUY.str\n{ HDML }                  = require 'hdml'\n_HTMLISH                  = ( require 'paragate/lib/htmlish.grammar' ).new_grammar { bare: true, }\n{ lets\n  freeze\n  thaw }                  = GUY.lft\nTIMETUNNEL                = require 'timetunnel'\n{ Moonriver }             = require 'moonriver'\n{ $ }                     = Moonriver\n\n\n#===========================================================================================================\ntypes.declare 'constructor_cfg', tests:\n  \"@isa.object x\":                                    ( x ) -> @isa.object x\n  \"( @isa.object x.mrg ) or ( @isa.function x.mrg )\": ( x ) -> ( @isa.object x.mrg ) or ( @isa.function x.mrg )\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'mrg_parse_dsk_cfg', tests:\n  \"@isa.object x\":                                    ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.dsk\":                         ( x ) -> @isa.nonempty_text x.dsk\n\n#===========================================================================================================\n### TAINT use more relaxed syntax for names ###\n# G: grouped\n# O: optional\nxncr          = {}\nxncr.nameG    = ( ///     (?<name>      [a-z][a-z0-9]* )       /// ).source\nxncr.nameOG   = ( /// (?: (?<csg>   (?: [a-z][a-z0-9]* ) ) | ) /// ).source\nxncr.hexG     = ( /// (?:     x  (?<hex> [a-fA-F0-9]+ )      ) /// ).source\nxncr.decG     = ( ///            (?<dec> [      0-9]+ )        /// ).source\nxncr.matcher  = /// ^ & #{xncr.nameG} ; | & #{xncr.nameOG} \\# (?: #{xncr.hexG} | #{xncr.decG} ) ; $ ///\nxncr.splitter = /// ( & [^\\s;]+ ; ) ///\n\n\n#===========================================================================================================\nclass @Htmlish\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: GUY.lft.freeze\n    xncr: xncr\n\n  # #---------------------------------------------------------------------------------------------------------\n  # constructor: ->\n  #   return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _tunnel: ( text ) ->\n    ### TAINT do not reconstruct tunnel for each call ###\n    # guards    = 'äöüßp'\n    # guards    = '①②③④⑤'\n    guards    = '¥₽₨฿₮'\n    intalph   = '0123456789'\n    tnl       = new TIMETUNNEL.Timetunnel { guards, intalph, }\n    tnl.add_tunnel TIMETUNNEL.tunnels.keep_backslash\n    # tnl.add_tunnel TIMETUNNEL.tunnels.remove_backslash\n    text      = tnl.hide text\n    return { text, reveal: ( tnl.reveal.bind tnl ), }\n\n  #---------------------------------------------------------------------------------------------------------\n  _entity_token_from_match: ( d, start, stop, match ) ->\n    g         = match.groups\n    R         = { d..., }\n    R.$key    = '^entity'\n    R.text    = match[ 0 ]\n    R.start   = start\n    R.stop    = stop\n    if g.name?\n      R.type    = 'named'\n      R.name    = g.name\n    else\n      R.type    = if g.csg? then 'xncr' else 'ncr'\n      R.csg     = g.csg if g.csg?\n      R.$value  = parseInt g.hex ? g.dec, ( if g.hex? then 16 else 10 )\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _text_token_from_part: ( d, start, stop, part ) ->\n    R       = { d..., }\n    R.text  = part\n    R.start = start\n    R.stop  = stop\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  parse: ( text, non_html_tags = null ) ->\n    ### TAINT use `cfg` pattern ###\n    ### TAINT do not reconstruct pipeline on each run ###\n    { text\n      reveal  }   = @_tunnel text\n    tokens        = thaw _HTMLISH.parse text\n    stack         = []\n    R             = []\n    mr            = new Moonriver()\n    xncr_matcher  = @constructor.C.xncr.matcher\n    xncr_splitter = @constructor.C.xncr.splitter\n    #-------------------------------------------------------------------------------------------------------\n    mr.push tokens\n    #-------------------------------------------------------------------------------------------------------\n    mr.push $add_location = ( d, send ) =>\n      [ lnr\n        col       ] = d.$vnr ? [ null, null, ]\n      d.delta_lnr   = lnr - 1\n      d.col         = col\n      send d\n    #-------------------------------------------------------------------------------------------------------\n    if non_html_tags?\n      mr.push $filter_nonhtml_syntax = do =>\n        wait_for_name = null\n        return ( d, send ) =>\n          if wait_for_name?\n            #...............................................................................................\n            if ( d.$key is '>tag' ) and ( d.name is wait_for_name )\n              wait_for_name = null\n              return send d\n            #...............................................................................................\n            e = { d..., }\n            e.$key  = '^rawtext'\n            delete e.atrs\n            return send e\n          #.................................................................................................\n          if ( d.$key is '<tag' ) and ( non_html_tags.has d.name )\n            wait_for_name = d.name\n          #.................................................................................................\n          send d\n    #-------------------------------------------------------------------------------------------------------\n    mr.push $parse_ncrs = ( d, send ) =>\n      return send d unless ( d.$key is '^text' )\n      parts     = d.text.split xncr_splitter\n      return send d unless parts.length > 1\n      is_entity = true\n      start     = 0\n      #.....................................................................................................\n      for part in parts\n        is_entity = not is_entity\n        continue if part is ''\n        stop      = start + part.length\n        #...................................................................................................\n        if is_entity and ( match = part.match xncr_matcher )?\n          send @_entity_token_from_match d, start, stop, match\n        else\n          send @_text_token_from_part d, start, stop, part\n        #...................................................................................................\n        start = stop\n      return null\n    #-------------------------------------------------------------------------------------------------------\n    mr.push $complain_about_bareachrs = ( d, send ) =>\n      return send d unless ( d.$key is '^text' )\n      #.....................................................................................................\n      if ( d.$key is '^text' )\n        if ( /(?<!\\\\)[<&]/.test d.text )\n          @_as_error d, '^ð1^', 'bareachrs', \"bare active characters\"\n      #.....................................................................................................\n      send d\n    #-------------------------------------------------------------------------------------------------------\n    mr.push $reveal_tunneled_text = ( d, send ) =>\n      return send d unless ( d.$key is '^text' ) or ( d.$key is '^rawtext' )\n      d.text = reveal d.text\n      send d\n    #-------------------------------------------------------------------------------------------------------\n    mr.push $remove_backslashes = ( d, send ) =>\n      return send d unless ( d.$key is '^text' )\n      d.text = d.text.replace /\\\\</g,     '&lt;'  ### TAINT conflicts with NCR parsing ###\n      d.text = d.text.replace /\\\\&/g,     '&amp;' ### TAINT conflicts with NCR parsing ###\n      d.text = d.text.replace /\\\\\\n/ugs,  ''    ### replace escaped newlines with empty string ###\n      d.text = d.text.replace /\\\\(.)/ugs, '$1'  ### obliterate remaining backslashes (exc. escaped ones) ###\n      send d\n    #-------------------------------------------------------------------------------------------------------\n    mr.push $treat_xws_in_opening_tags = ( d, send ) =>\n      return send d unless ( d.$key is '<tag' )\n      if ( d.type is 'otag' ) and ( /^<\\s+/.test d.text )\n        @_as_error d, '^ð1^', 'xtraows', \"extraneous whitespace before tag name\"\n      send d\n    #-------------------------------------------------------------------------------------------------------\n    mr.push $treat_xws_in_closing_tags = ( d, send ) =>\n      return send d unless ( d.$key is '>tag' )\n      if ( d.type is 'ctag' ) and ( ( /^<\\s*\\/\\s+/.test d.text ) or ( /^<\\s+\\/\\s*/.test d.text ) )\n        @_as_error d, '^ð2^', 'xtracws', \"extraneous whitespace in closing tag\"\n      send d\n    #-------------------------------------------------------------------------------------------------------\n    mr.push $handle_stack_open = ( d, send ) =>\n      stack.push d if ( d.$key is '<tag' ) # and ( d.type is 'ctag' )\n      send d\n    #-------------------------------------------------------------------------------------------------------\n    mr.push $handle_stack_close = ( d, send ) =>\n      # debug '^398^', stack\n      return send d unless ( d.$key is '>tag' )\n      #.....................................................................................................\n      if stack.length is 0\n        return send @_as_error d, '^ð2^', 'xtractag', \"extraneous closing tag </#{d.name}>\"\n      #.....................................................................................................\n      matching_d = stack.pop()\n      if d.name?\n        if ( d.name != matching_d.name )\n          return send @_as_error d, '^ð2^', 'nomatch', \"expected </#{matching_d.name}>, got </#{d.name}>\"\n      #...................................................................................................\n      else\n        d.name = matching_d.name\n      send d\n    #-------------------------------------------------------------------------------------------------------\n    mr.push $relabel_rawtexts = ( d, send ) ->\n      urge '^387^', rpr d.text\n      d.$key = '^text' if d.$key is '^rawtext'\n      send d\n    # #-------------------------------------------------------------------------------------------------------\n    # mr.push $consolidate_texts = do =>\n    #   last          = Symbol 'last'\n    #   # prv_was_text  = false\n    #   send          = null\n    #   collector     = []\n    #   #.....................................................................................................\n    #   flush = ->\n    #     # prv_was_text      = false\n    #     return if collector.length is 0\n    #     d = collector[  0 ]\n    #     if collector.length > 1\n    #       d.text  = ( e.text for e in collector ).join ''\n    #       d.stop  = collector[ collector.length - 1 ].stop\n    #     send d\n    #     collector.length  = 0\n    #   #.....................................................................................................\n    #   return $ { last, }, ( d, _send ) ->\n    #     send = _send\n    #     return flush() if d is last\n    #     unless d.$key is '^text'\n    #       flush()\n    #       return send d\n    #     collector.push d\n    #-------------------------------------------------------------------------------------------------------\n    mr.push ( d ) => R.push d\n    mr.drive()\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _as_error: ( token, ref, code, message ) ->\n    token.$key    = '^error'\n    token.origin  = 'htmlish'\n    token.code    = code\n    token.message = message\n    token.$       = ref\n    return token\n\n#-----------------------------------------------------------------------------------------------------------\n@HTMLISH = HTMLISH = new @Htmlish()\n\n\n#===========================================================================================================\nclass @Html\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: GUY.lft.freeze\n    defaults:\n      #.....................................................................................................\n      constructor_cfg:\n        mrg:              null\n        prefix:           null\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg      = { @constructor.C.defaults.constructor_cfg..., cfg..., }\n    GUY.props.hide @, 'types', types\n    @types.validate.constructor_cfg @cfg\n    { mrg, }  = GUY.obj.pluck_with_fallback @cfg, null, 'mrg'\n    GUY.props.hide @, 'mrg', mrg\n    GUY.props.hide @, 'HTMLISH', HTMLISH\n    @cfg      = GUY.lft.freeze @cfg\n    @_set_variables?()\n    @_create_sql_functions?()\n    @_procure_infrastructure?()\n    @_compile_statements?()\n    @_procure_infradata?()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _set_variables: ->\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    { prefix } = @cfg\n    #-------------------------------------------------------------------------------------------------------\n    @mrg.db.create_window_function\n      name:           \"#{prefix}_html_create_tag\"\n      varargs:        false\n      deterministic:  true\n      start:          null\n      step:           ( Σ, typ, tag, k, v, txt ) ->\n        Σ            ?= { typ, tag, atrs: {}, txt, }\n        Σ.atrs[ k ]   = v if k?\n        return Σ\n      inverse:        ( Σ, dropped ) -> return null unless Σ?; delete Σ.atrs[ k ]; Σ\n      result:         ( Σ ) ->\n        return '' unless Σ?\n        return switch Σ.typ\n          when 't' then HDML.escape_text Σ.txt\n          when 'r' then \"<!-- #{HDML.escape_text Σ.txt} -->\"\n          when 'b' then '\\n'\n          when 'e' then ( HDML.create_tag '<', 'error', Σ.atrs  ) + \\\n                        ( HDML.escape_text Σ.txt                ) + \\\n                        ( HDML.create_tag '>', 'error'          )\n          else HDML.create_tag Σ.typ, Σ.tag, Σ.atrs\n    #-------------------------------------------------------------------------------------------------------\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _procure_infrastructure: ->\n    ### TAINT skip if tables found ###\n    { prefix  } = @cfg\n    { db      } = @mrg\n    db.set_foreign_keys_state false\n    db SQL\"\"\"\n      drop  index if exists #{prefix}_html_mirror_tag_idx;\n      drop  view  if exists #{prefix}_html_tags_and_html;\n      drop  table if exists #{prefix}_html_tags;\n      drop  table if exists #{prefix}_html_typs;\n      drop  table if exists #{prefix}_html_atrs;\n      drop  table if exists #{prefix}_html_mirror;\n      drop  table if exists #{prefix}_html_atrids;\"\"\"\n    db.set_foreign_keys_state true\n    #-------------------------------------------------------------------------------------------------------\n    db SQL\"\"\"\n      create table #{prefix}_html_tags (\n          tag       text    not null primary key,\n          is_block  boolean not null default false,\n          is_empty  boolean not null default false,\n          syntax    text    not null default 'html' );\"\"\"\n    #-------------------------------------------------------------------------------------------------------\n    db SQL\"\"\"\n      create table #{prefix}_html_atrids (\n          atrid integer not null,\n        primary key ( atrid ),\n        check ( atrid > 0 and floor( atrid ) = atrid ) );\"\"\"\n    db SQL\"\"\"\n      create table #{prefix}_html_atrs (\n          atrid integer not null,\n          k     text    not null,\n          v     text    not null,\n        primary key ( atrid, k ),\n        foreign key ( atrid ) references #{prefix}_html_atrids,\n        check ( length( k ) > 0 ) )\n        strict;\"\"\"\n    db SQL\"\"\"\n      create table #{prefix}_html_typs (\n          typ   text not null,\n          name  text not null,\n          primary key ( typ ),\n          unique ( name ),\n          check ( length( typ  ) = 1 ),\n          check ( length( name ) > 0 ) );\"\"\"\n    db SQL\"\"\"\n      insert into #{prefix}_html_typs values\n          ( '<', 'otag'     ),\n          ( '>', 'ctag'     ),\n          ( '^', 'stag'     ),\n          ( 'b', 'blank'    ),\n          ( 't', 'text'     ),\n          ( 'r', 'comment'  ),\n          ( 'e', 'error'    );\"\"\"\n    db SQL\"\"\"\n      create table #{prefix}_html_mirror (\n          dsk     text    not null,                         -- data source key\n          oln     integer not null,                         -- original line nr (1-based)\n          col     integer not null,                         -- column where `txt` starts\n          trk     integer not null default 1,               -- track number\n          pce     integer not null default 1,               -- piece number\n          typ     text    not null,                         -- node type\n          tag     text,                                     -- null for texts, comments\n          atrid   integer,\n          -- act     boolean not null default 1,               -- true: active, false: deleted\n          txt     text,\n        primary key ( dsk, oln, trk, pce ),\n        foreign key ( dsk   ) references #{prefix}_datasources,\n        foreign key ( typ   ) references #{prefix}_html_typs,\n        foreign key ( atrid ) references #{prefix}_html_atrids,\n        check ( length( tag ) > 0 ) );\n      create index #{prefix}_html_mirror_tag_idx on #{prefix}_html_mirror ( tag );\"\"\"\n    db SQL\"\"\"\n      create view #{prefix}_html_tags_and_html as select distinct\n          t.dsk                                                               as dsk,\n          t.oln                                                               as oln,\n          t.col                                                               as col,\n          t.trk                                                               as trk,\n          t.pce                                                               as pce,\n          t.typ                                                               as typ,\n          t.tag                                                               as tag,\n          t.atrid                                                             as atrid,\n          #{prefix}_html_create_tag( t.typ, t.tag, a.k, a.v, t.txt ) over w   as html\n        from\n          #{prefix}_html_mirror as t\n          left join #{prefix}_html_atrs as a using ( atrid )\n        where true\n          and ( t.dsk = std_getv( 'dsk' ) )\n        window w as (\n          partition by t.dsk, t.oln, t.trk, t.pce\n          order by a.k\n          rows between unbounded preceding and unbounded following )\n        order by t.dsk, t.oln, t.trk, t.pce;\"\"\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _procure_infradata: ->\n    ### TAINT skip if tables found ###\n    { prefix      } = @cfg\n    { db          } = @mrg\n    { insert_tag  } = @statements\n    #.......................................................................................................\n    db =>\n      try\n        for d in ( require './data-html5-tags' ).tags\n          tag       = d.tag\n          is_empty  = if d.is_empty then 1 else 0\n          is_block  = if d.is_block then 1 else 0\n          syntax    = d.syntax ? 'html'\n          insert_tag.run { tag, is_empty, is_block, syntax, }\n      catch error\n        throw new db.E.DBay_internal_error '^mirage-html@1^', \\\n          \"when trying to insert #{rpr d}, an error occurred: #{error.message}\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_statements: ->\n    { prefix  } = @cfg\n    { db      } = @mrg\n    #.......................................................................................................\n    GUY.props.hide @, 'statements',\n      #.....................................................................................................\n      insert_atrid: db.prepare_insert {\n        into: \"#{prefix}_html_atrids\", returning: '*', exclude: [ 'atrid', ], }\n      #.....................................................................................................\n      ### NOTE we don't use `autoincrement` b/c this is the more general solution; details will change when\n      the VNR gets more realistic (dsk, linenr, ...) ###\n      insert_content: db.prepare SQL\"\"\"\n        with v1 as ( select\n            coalesce( max( pce ), 0 ) + 1 as pce\n          from #{prefix}_html_mirror\n          where true\n            and ( dsk = $dsk )\n            and ( oln = $oln )\n            and ( trk = $trk ) )\n        insert into #{prefix}_html_mirror ( dsk, oln, col, trk, pce, typ, tag, atrid, txt )\n          values ( $dsk, $oln, $col, $trk, ( select pce from v1 ), $typ, $tag, $atrid, $txt )\n          returning *;\"\"\"\n      #.....................................................................................................\n      insert_atr: db.prepare_insert { into: \"#{prefix}_html_atrs\", returning: null, }\n      insert_tag: db.prepare_insert { into: \"#{prefix}_html_tags\", returning: null, }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  render_dsk: ( cfg ) ->\n    { dsk     } = cfg\n    { db      } = @mrg\n    { prefix  } = @cfg\n    db.setv 'dsk', dsk\n    return ( db.all_first_values SQL\"select html from #{prefix}_html_tags_and_html;\" ).join ''\n\n  #---------------------------------------------------------------------------------------------------------\n  _append_tag: ( dsk, oln, col, trk, typ, tag, atrs = null, text = null ) ->\n    atrid = null\n    if atrs?\n      { atrid } = @mrg.db.first_row @statements.insert_atrid\n      for k, v of atrs\n        v = rpr v unless isa.text v\n        @statements.insert_atr.run { atrid, k, v, }\n    return @statements.insert_content.get { dsk, oln, col, trk, typ, tag, atrid, txt: text, }\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT consider to cache ###\n  _get_non_html_tags: -> new Set @mrg.db.all_first_values SQL\"\"\"\n    select * from #{@cfg.prefix}_html_tags where syntax != 'html';\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  parse_dsk: ( cfg ) ->\n    validate.mrg_parse_dsk_cfg ( cfg = { @constructor.C.defaults.mrg_parse_dsk_cfg..., cfg..., } )\n    { dsk } = cfg\n    #.......................................................................................................\n    @mrg.db.with_transaction =>\n      for { oln1, wslc, trk, txt, } from @mrg.walk_par_rows { dsk, }\n        tokens = @HTMLISH.parse txt, @_get_non_html_tags()\n        for d in tokens\n          debug '^383^', d\n          oln = oln1 + d.delta_lnr ? 0\n          col = d.col\n          switch d.$key\n            when '<tag'     then @_append_tag dsk, oln, col, trk, '<', d.name, d.atrs\n            when '>tag'     then @_append_tag dsk, oln, col, trk, '>', d.name, d.atrs\n            when '^tag'     then @_append_tag dsk, oln, col, trk, '^', d.name, d.atrs\n            when '^text'    then @_append_tag dsk, oln, col, trk, 't', null, null, d.text\n            when '^comment', '^doctype'\n              @_append_tag dsk, oln, col, trk, 'r', null, null, d.text.replace /^<!--\\s*(.*?)\\s*-->$/, '$1'\n            when '^error'\n              warn '^435345^', \"error #{rpr d}\"\n              atrs = { start: d.start, stop: d.stop, code: d.code, }\n              @_append_tag dsk, oln, col, trk, 'e', null, atrs, \"#{d.message}: #{rpr d.text}\"\n            else\n              warn '^435345^', \"unhandled token #{rpr d}\"\n              atrs  = { start: d.start, stop: d.stop, code: 'unhandled', }\n              d     = { $key: d.$key, name: d.name, type: d.type, }\n              @_append_tag dsk, oln, col, trk, 'e', null, atrs, \"unhandled token: #{rpr d}\"\n        for _ in [ 1 .. wslc + 1 ]\n          @_append_tag dsk, oln, col, trk, 'b', null, null, '\\n'\n    return null\n\n\n\n\n\n"
  ]
}