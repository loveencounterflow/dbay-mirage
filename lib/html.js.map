{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/html.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-MIRAGE/HTML'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nGUY                       = require 'guy'\n{ HDML }                  = require 'hdml'\n_HTMLISH                  = ( require 'paragate/lib/htmlish.grammar' ).new_grammar { bare: true, }\n{ lets\n  freeze }                = GUY.lft\n\n\n#===========================================================================================================\ntypes.declare 'constructor_cfg', tests:\n  \"@isa.object x\":                                    ( x ) -> @isa.object x\n  \"( @isa.object x.mrg ) or ( @isa.function x.mrg )\": ( x ) -> ( @isa.object x.mrg ) or ( @isa.function x.mrg )\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'mrg_parse_dsk_cfg', tests:\n  \"@isa.object x\":                                    ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.dsk\":                         ( x ) -> @isa.nonempty_text x.dsk\n\n\n#===========================================================================================================\nclass Htmlish\n\n  # #---------------------------------------------------------------------------------------------------------\n  # constructor: ->\n  #   return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  parse: ( text ) ->\n    tokens    = _HTMLISH.parse text\n    R         = lets tokens, ( tokens ) =>\n      for d, idx in tokens\n        # warn '^44564976^', d if d.$key is '^error'\n        if ( d.$key is '<tag' )\n          if ( d.type is 'otag' )\n            if ( /^<\\s+/.test d.text )\n              @_as_error d, '^ð1^', 'xtraows', \"extraneous whitespace before tag name\"\n        else if ( d.$key is '>tag' )\n          if ( d.type is 'ctag' )\n            if( /^<\\s*\\/\\s+/.test d.text ) or ( /^<\\s+\\/\\s*/.test d.text )\n              @_as_error d, '^ð2^', 'xtracws', \"extraneous whitespace in closing tag\"\n        else if ( d.$key is '^text' )\n          if ( /(?<!\\\\)[<&]/.test d.text )\n            @_as_error d, '^ð1^', 'bareachrs', \"bare active characters\"\n      return null\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _as_error: ( token, ref, code, message ) ->\n    token.$key    = '^error'\n    token.origin  = 'htmlish'\n    token.code    = code\n    token.message = message\n    token.$       = ref\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\nHTMLISH = new Htmlish()\n\n\n#===========================================================================================================\nclass @Html\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: GUY.lft.freeze\n    defaults:\n      #.....................................................................................................\n      constructor_cfg:\n        mrg:              null\n        prefix:           null\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg      = { @constructor.C.defaults.constructor_cfg..., cfg..., }\n    GUY.props.hide @, 'types', types\n    @types.validate.constructor_cfg @cfg\n    { mrg, }  = GUY.obj.pluck_with_fallback @cfg, null, 'mrg'\n    GUY.props.hide @, 'mrg', mrg\n    @cfg      = GUY.lft.freeze @cfg\n    @_set_variables?()\n    @_create_sql_functions?()\n    @_procure_infrastructure?()\n    @_compile_statements?()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _set_variables: ->\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    { prefix } = @cfg\n    #-------------------------------------------------------------------------------------------------------\n    @mrg.db.create_window_function\n      name:           \"#{prefix}_html_create_tag\"\n      varargs:        false\n      deterministic:  true\n      start:          null\n      step:           ( Σ, typ, tag, k, v, txt ) ->\n        Σ            ?= { typ, tag, atrs: {}, txt, }\n        Σ.atrs[ k ]   = v if k?\n        return Σ\n      inverse:        ( Σ, dropped ) -> return null unless Σ?; delete Σ.atrs[ k ]; Σ\n      result:         ( Σ ) ->\n        return '' unless Σ?\n        return switch Σ.typ\n          when 't' then HDML.escape_text Σ.txt\n          when 'c' then \"<!-- #{HDML.escape_text Σ.txt} -->\"\n          when 'e' then ( HDML.create_tag '<', 'error', Σ.atrs  ) + \\\n                        ( HDML.escape_text Σ.txt                ) + \\\n                        ( HDML.create_tag '>', 'error'          )\n          else HDML.create_tag Σ.typ, Σ.tag, Σ.atrs\n    #-------------------------------------------------------------------------------------------------------\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _procure_infrastructure: ->\n    ### TAINT skip if tables found ###\n    { prefix  } = @cfg\n    { db      } = @mrg\n    db.set_foreign_keys_state false\n    db SQL\"\"\"\n      drop  index if exists #{prefix}_html_mirror_tag_idx;\n      drop  view  if exists #{prefix}_html_tags_and_html;\n      drop  table if exists #{prefix}_html_typs;\n      drop  table if exists #{prefix}_html_atrs;\n      drop  table if exists #{prefix}_html_mirror;\n      drop  table if exists #{prefix}_html_atrids;\"\"\"\n    db.set_foreign_keys_state true\n    #-------------------------------------------------------------------------------------------------------\n    db SQL\"\"\"\n      create table #{prefix}_html_atrids (\n          atrid integer not null,\n        primary key ( atrid ),\n        check ( atrid > 0 and floor( atrid ) = atrid ) );\"\"\"\n    db SQL\"\"\"\n      create table #{prefix}_html_atrs (\n          atrid integer not null,\n          k     text    not null,\n          v     text    not null,\n        primary key ( atrid, k ),\n        foreign key ( atrid ) references #{prefix}_html_atrids,\n        check ( length( k ) > 0 ) )\n        strict;\"\"\"\n    db SQL\"\"\"\n      create table #{prefix}_html_typs (\n          typ   text not null,\n          name  text not null,\n          primary key ( typ ),\n          unique ( name ),\n          check ( length( typ  ) = 1 ),\n          check ( length( name ) > 0 ) );\"\"\"\n    db SQL\"\"\"\n      insert into #{prefix}_html_typs values\n          ( '<', 'otag'     ),\n          ( '>', 'ctag'     ),\n          ( '^', 'stag'     ),\n          ( 't', 'text'     ),\n          ( 'r', 'comment'  ),\n          ( 'e', 'error'    );\"\"\"\n    db SQL\"\"\"\n      create table #{prefix}_html_mirror (\n          dsk   text    not null,\n          tid   integer not null,\n          typ   text    not null,   -- node type\n          tag   text,               -- null for texts, comments\n          atrid integer,\n          text  text,\n        primary key ( dsk, tid ),\n        foreign key ( dsk   ) references #{prefix}_datasources,\n        foreign key ( typ   ) references #{prefix}_html_typs,\n        foreign key ( atrid ) references #{prefix}_html_atrids,\n        check ( length( tag ) > 0 ) );\n      create index #{prefix}_html_mirror_tag_idx on #{prefix}_html_mirror ( tag );\"\"\"\n    db SQL\"\"\"\n      create view #{prefix}_html_tags_and_html as select distinct\n          t.dsk                                                               as dsk,\n          t.tid                                                               as tid,\n          t.typ                                                               as typ,\n          t.tag                                                               as tag,\n          t.atrid                                                             as atrid,\n          #{prefix}_html_create_tag( t.typ, t.tag, a.k, a.v, t.text ) over w  as xxx\n        from\n          #{prefix}_html_mirror as t\n          left join #{prefix}_html_atrs as a using ( atrid )\n        where true\n          and ( t.dsk = std_getv( 'dsk' ) )\n        window w as (\n          partition by t.tid\n          order by a.k\n          rows between unbounded preceding and unbounded following )\n        order by tid;\"\"\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_statements: ->\n    { prefix  } = @cfg\n    { db      } = @mrg\n    #.......................................................................................................\n    GUY.props.hide @, 'statements',\n      insert_atrid:      db.prepare_insert {\n        into: \"#{prefix}_html_atrids\", returning: '*', exclude: [ 'atrid', ], }\n      ### NOTE we don't use `autoincrement` b/c this is the more general solution; details will change when\n      the VNR gets more realistic (dsk, linenr, ...) ###\n      insert_content:    db.prepare SQL\"\"\"\n        with v1 as ( select coalesce( max( tid ), 0 ) + 1 as tid from #{prefix}_html_mirror where dsk = $dsk )\n        insert into #{prefix}_html_mirror ( dsk, tid, typ, tag, atrid, text )\n          values ( $dsk, ( select tid from v1 ), $typ, $tag, $atrid, $text )\n          returning *;\"\"\"\n      insert_atr:        db.prepare_insert { into: \"#{prefix}_html_atrs\",         returning: null, }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _append_tag: ( dsk, typ, tag, atrs = null, text = null ) ->\n    atrid = null\n    if atrs?\n      { atrid } = @mrg.db.first_row @statements.insert_atrid\n      for k, v of atrs\n        v = rpr v unless isa.text v\n        @statements.insert_atr.run { atrid, k, v, }\n    return @mrg.db.first_row @statements.insert_content, { dsk, typ, tag, atrid, text, }\n\n  #---------------------------------------------------------------------------------------------------------\n  render_dsk: ( cfg ) ->\n    { dsk     } = cfg\n    { db      } = @mrg\n    { prefix  } = @cfg\n    db.setv 'dsk', dsk\n    return ( db.all_first_values SQL\"select xxx from #{prefix}_html_tags_and_html;\" ).join ''\n\n  #---------------------------------------------------------------------------------------------------------\n  parse_dsk: ( cfg ) ->\n    validate.mrg_parse_dsk_cfg ( cfg = { @constructor.C.defaults.mrg_parse_dsk_cfg..., cfg..., } )\n    { dsk } = cfg\n    #.......................................................................................................\n    for { par, rwn1, rwn2, txt, } from @mrg.get_par_rows { dsk, }\n      tokens = HTMLISH.parse txt\n      console.table tokens\n      for d in tokens\n        switch d.$key\n          when '<tag'     then @_append_tag dsk, '<', d.name, d.atrs\n          when '>tag'     then @_append_tag dsk, '>', d.name, d.atrs\n          when '^tag'     then @_append_tag dsk, '^', d.name, d.atrs\n          when '^text'    then @_append_tag dsk, 't', null, null, d.text\n          when '^comment'\n            @_append_tag dsk, 'r', null, null, d.text.replace /^<!--\\s*(.*?)\\s*-->$/, '$1'\n          when '^error'\n            atrs = { start: d.start, stop: d.stop, code: d.code, }\n            @_append_tag dsk, 'e', null, atrs, \"#{d.message}: #{rpr d.text}\"\n          else\n            warn '^435345^', \"unhandled token #{rpr d}\"\n            atrs  = { start: d.start, stop: d.stop, code: 'unhandled', }\n            d     = { $key: d.$key, name: d.name, type: d.type, }\n            @_append_tag dsk, 'e', null, atrs, \"unhandled token: #{rpr d}\"\n    return null\n\n\n\n\n\n"
  ]
}