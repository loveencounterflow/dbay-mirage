{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/html.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-MIRAGE/HTML'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nGUY                       = require 'guy'\n{ SQL }                   = GUY.str\n{ HDML }                  = require 'hdml'\n{ lets\n  freeze\n  thaw }                  = GUY.lft\n{ HTMLISH }               = require './htmlish-parser'\n\n\n#===========================================================================================================\ntypes.declare 'constructor_cfg', tests:\n  \"@isa.object x\":                                    ( x ) -> @isa.object x\n  \"( @isa.object x.mrg ) or ( @isa.function x.mrg )\": ( x ) -> ( @isa.object x.mrg ) or ( @isa.function x.mrg )\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'mrg_parse_dsk_cfg', tests:\n  \"@isa.object x\":                                    ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.dsk\":                         ( x ) -> @isa.nonempty_text x.dsk\n\n\n#===========================================================================================================\nclass @Html\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: GUY.lft.freeze\n    defaults:\n      #.....................................................................................................\n      constructor_cfg:\n        mrg:              null\n        prefix:           null\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg              = { @constructor.C.defaults.constructor_cfg..., cfg..., }\n    GUY.props.hide @, 'types', types\n    @types.validate.constructor_cfg @cfg\n    { mrg, }          = GUY.obj.pluck_with_fallback @cfg, null, 'mrg'\n    GUY.props.hide @, 'mrg', mrg\n    GUY.props.hide @, 'HTMLISH', HTMLISH\n    @cfg              = GUY.lft.freeze @cfg\n    @_swapper_catalog = null\n    @_syntax_catalog  = null\n    @_set_variables?()\n    @_create_sql_functions?()\n    @_procure_infrastructure?()\n    @_compile_statements?()\n    @_procure_infradata?()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _set_variables: ->\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    { prefix } = @cfg\n    #-------------------------------------------------------------------------------------------------------\n    @mrg.db.create_window_function\n      name:           \"#{prefix}_html_create_tag\"\n      varargs:        false\n      deterministic:  true\n      start:          null\n      step:           ( Σ, typ, tag, syntax, k, v, txt ) =>\n        { escape_ltamp }  = @_syntax_catalog[ syntax ]\n        Σ                ?= { typ, tag, atrs: {}, txt, escape_ltamp, }\n        Σ.atrs[ k ]       = v if k?\n        return Σ\n      inverse:        ( Σ, dropped ) -> return null unless Σ?; delete Σ.atrs[ k ]; Σ\n      result:         ( Σ ) ->\n        return '' unless Σ?\n        return switch Σ.typ\n          when 't' then if Σ.escape_ltamp then HDML.escape_text Σ.txt else Σ.txt\n          when 'r' then \"<!-- #{HDML.escape_text Σ.txt} -->\"\n          when 'b' then '\\n'\n          when 'e' then ( HDML.create_tag '<', 'error', Σ.atrs  ) + \\\n                        ( HDML.escape_text Σ.txt                ) + \\\n                        ( HDML.create_tag '>', 'error'          )\n          else HDML.create_tag Σ.typ, Σ.tag, Σ.atrs\n    #-------------------------------------------------------------------------------------------------------\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _procure_infrastructure: ->\n    ### TAINT skip if tables found ###\n    { prefix  } = @cfg\n    { db      } = @mrg\n    db.set_foreign_keys_state false\n    db SQL\"\"\"\n      drop  index if exists #{prefix}_html_mirror_tag_idx;\n      drop  view  if exists #{prefix}_html_tags_and_html;\n      drop  table if exists #{prefix}_html_syntaxes;\n      drop  table if exists #{prefix}_html_swapper_matches;\n      drop  table if exists #{prefix}_html_swappers;\n      drop  table if exists #{prefix}_html_tags;\n      drop  table if exists #{prefix}_html_typs;\n      drop  table if exists #{prefix}_html_atrs;\n      drop  table if exists #{prefix}_html_mirror;\n      drop  table if exists #{prefix}_html_atrids;\"\"\"\n    db.set_foreign_keys_state true\n    #-------------------------------------------------------------------------------------------------------\n    db SQL\"\"\"\n      create table #{prefix}_html_syntaxes (\n          syntax              text    not null primary key,\n          remove_backslashes  boolean not null default false,\n          expand_ncrs         boolean not null default false,\n          escape_ltamp        boolean not null default false );\"\"\"\n    #-------------------------------------------------------------------------------------------------------\n    db SQL\"\"\"\n      create table #{prefix}_html_swappers (\n          name                text    not null primary key,\n          syntax              text    not null references #{prefix}_html_syntaxes,\n          environment         text    not null,\n          open                text,\n          close               text,\n          either              text,\n        check ( ( open is     null and close is     null and either is not  null ) or\n                ( open is not null and close is not null and either is      null ) ) );\"\"\"\n    #-------------------------------------------------------------------------------------------------------\n      # create table #{prefix}_html_zones (\n    db SQL\"\"\"\n      create table #{prefix}_html_swapper_matches (\n          dsk                 text    not null,\n          oln                 integer not null,\n          trk                 integer not null default 1,\n          pce                 integer not null default 1,\n          start               integer not null,\n          stop                integer not null,\n          role                text    not null,\n          swapper             text    not null references #{prefix}_html_swappers ( name ),\n        foreign key ( dsk, oln, trk, pce ) references #{prefix}_raw_mirror );\"\"\"\n    #-------------------------------------------------------------------------------------------------------\n    db SQL\"\"\"\n      create table #{prefix}_html_tags (\n          tag                 text    not null primary key,\n          is_block            boolean not null default false,\n          is_empty            boolean not null default false,\n          syntax              text    not null default 'html' references #{prefix}_html_syntaxes );\"\"\"\n    #-------------------------------------------------------------------------------------------------------\n    db SQL\"\"\"\n      create table #{prefix}_html_atrids (\n          atrid integer not null,\n        primary key ( atrid ),\n        check ( atrid > 0 and floor( atrid ) = atrid ) );\"\"\"\n    #-------------------------------------------------------------------------------------------------------\n    db SQL\"\"\"\n      create table #{prefix}_html_atrs (\n          atrid integer not null,\n          k     text    not null,\n          v     text    not null,\n        primary key ( atrid, k ),\n        foreign key ( atrid ) references #{prefix}_html_atrids,\n        check ( length( k ) > 0 ) )\n        strict;\"\"\"\n    #-------------------------------------------------------------------------------------------------------\n    db SQL\"\"\"\n      create table #{prefix}_html_typs (\n          typ   text not null,\n          name  text not null,\n          primary key ( typ ),\n          unique ( name ),\n          check ( length( typ  ) = 1 ),\n          check ( length( name ) > 0 ) );\"\"\"\n    #-------------------------------------------------------------------------------------------------------\n    db SQL\"\"\"\n      insert into #{prefix}_html_typs values\n          ( '<', 'otag'     ),\n          ( '>', 'ctag'     ),\n          ( '^', 'stag'     ),\n          ( 'b', 'blank'    ),\n          ( 't', 'text'     ),\n          ( 'r', 'comment'  ),\n          ( 'e', 'error'    );\"\"\"\n    #-------------------------------------------------------------------------------------------------------\n    db SQL\"\"\"\n      create table #{prefix}_html_mirror (\n          dsk     text    not null,                         -- data source key\n          oln     integer not null,                         -- original line nr (1-based)\n          col     integer not null,                         -- column where `txt` starts\n          trk     integer not null default 1,               -- track number\n          pce     integer not null default 1,               -- piece number\n          typ     text    not null,                         -- node type\n          tag     text,                                     -- null for texts, comments\n          syntax  text    references #{prefix}_html_syntaxes,\n          atrid   integer,\n          -- act     boolean not null default 1,               -- true: active, false: deleted\n          txt     text,\n        primary key ( dsk, oln, trk, pce ),\n        foreign key ( dsk   ) references #{prefix}_datasources,\n        foreign key ( typ   ) references #{prefix}_html_typs,\n        foreign key ( atrid ) references #{prefix}_html_atrids,\n        check ( length( tag ) > 0 ) );\n      create index #{prefix}_html_mirror_tag_idx on #{prefix}_html_mirror ( tag );\"\"\"\n    #-------------------------------------------------------------------------------------------------------\n    db SQL\"\"\"\n      create view #{prefix}_html_tags_and_html as select distinct\n          t.dsk                                                                       as dsk,\n          t.oln                                                                       as oln,\n          t.col                                                                       as col,\n          t.trk                                                                       as trk,\n          t.pce                                                                       as pce,\n          t.typ                                                                       as typ,\n          t.tag                                                                       as tag,\n          t.syntax                                                                    as syntax,\n          t.atrid                                                                     as atrid,\n          #{prefix}_html_create_tag( t.typ, t.tag, t.syntax, a.k, a.v, t.txt ) over w as html\n        from\n          #{prefix}_html_mirror as t\n          left join #{prefix}_html_atrs as a using ( atrid )\n        where true\n          and ( t.dsk = std_getv( 'dsk' ) )\n        window w as (\n          partition by t.dsk, t.oln, t.trk, t.pce\n          order by a.k\n          rows between unbounded preceding and unbounded following )\n        order by t.dsk, t.oln, t.trk, t.pce;\"\"\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _procure_infradata: ->\n    ### TAINT skip if tables found ###\n    { prefix      }   = @cfg\n    { db          }   = @mrg\n    { insert_syntax\n      insert_swapper\n      insert_tag  }   = @statements\n    html_data         = require './data-html5-tags'\n    @_swapper_catalog = {}\n    #.......................................................................................................\n    db =>\n      try\n        for d in html_data.syntaxes\n          syntax              = d.syntax\n          remove_backslashes  = if d.remove_backslashes then 1 else 0\n          expand_ncrs         = if d.expand_ncrs        then 1 else 0\n          escape_ltamp        = if d.escape_ltamp       then 1 else 0\n          insert_syntax.run { syntax, remove_backslashes, expand_ncrs, escape_ltamp, }\n      catch error\n        throw new db.E.DBay_internal_error '^mirage-html@1^', \\\n          \"when trying to insert #{rpr d}, an error occurred: #{error.message}\"\n    #.......................................................................................................\n    db =>\n      try\n        for d in html_data.swappers\n          { name\n            environment\n            syntax\n            open\n            close\n            either }                = d\n          @_swapper_catalog[ name ] = { name, environment, syntax, open, close, either, }\n          open                      = open?.source    ? null\n          close                     = close?.source   ? null\n          either                    = either?.source  ? null\n          insert_swapper.run { name, environment, syntax, open, close, either, }\n      catch error\n        throw new db.E.DBay_internal_error '^mirage-html@2^', \\\n          \"when trying to insert #{rpr d}, an error occurred: #{error.message}\"\n    #.......................................................................................................\n    db =>\n      try\n        for d in html_data.tags\n          tag       = d.tag\n          is_empty  = if d.is_empty then 1 else 0\n          is_block  = if d.is_block then 1 else 0\n          syntax    = d.syntax ? 'html'\n          insert_tag.run { tag, is_empty, is_block, syntax, }\n      catch error\n        throw new db.E.DBay_internal_error '^mirage-html@3^', \\\n          \"when trying to insert #{rpr d}, an error occurred: #{error.message}\"\n    #.......................................................................................................\n    ### TAINT caching this value means we must be careful with additions; use better solution ###\n    ### TAINT unify methods ###\n    @_syntax_catalog  = freeze @_get_syntax_catalog()\n    @_swapper_catalog = freeze @_swapper_catalog\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT consider to cache ###\n  _get_syntax_catalog: -> @mrg.db.as_object 'syntax', SQL\"\"\"\n    select\n        *\n      from #{@cfg.prefix}_html_syntaxes;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT consider to cache ###\n  _get_tag_catalog: -> @mrg.db.as_object 'tag', SQL\"\"\"\n    select\n        *\n      from #{@cfg.prefix}_html_tags\n      where ( syntax != 'html' ) or ( is_block ) or ( is_empty );\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_statements: ->\n    { prefix  } = @cfg\n    { db      } = @mrg\n    #.......................................................................................................\n    GUY.props.hide @, 'statements',\n      #.....................................................................................................\n      insert_atrid: db.prepare_insert {\n        into: \"#{prefix}_html_atrids\", returning: '*', exclude: [ 'atrid', ], }\n      #.....................................................................................................\n      ### NOTE we don't use `autoincrement` b/c this is the more general solution; details will change when\n      the VNR gets more realistic (dsk, linenr, ...) ###\n      insert_content: db.prepare SQL\"\"\"\n        with v1 as ( select\n            coalesce( max( pce ), 0 ) + 1 as pce\n          from #{prefix}_html_mirror\n          where true\n            and ( dsk = $dsk )\n            and ( oln = $oln )\n            and ( trk = $trk ) )\n        insert into #{prefix}_html_mirror ( dsk, oln, col, trk, pce, typ, tag, syntax, atrid, txt )\n          values ( $dsk, $oln, $col, $trk, ( select pce from v1 ), $typ, $tag, $syntax, $atrid, $txt )\n          returning *;\"\"\"\n      #.....................................................................................................\n      insert_atr:             db.prepare_insert { into: \"#{prefix}_html_atrs\",            returning: null, }\n      insert_tag:             db.prepare_insert { into: \"#{prefix}_html_tags\",            returning: null, }\n      insert_syntax:          db.prepare_insert { into: \"#{prefix}_html_syntaxes\",        returning: null, }\n      insert_swapper:         db.prepare_insert { into: \"#{prefix}_html_swappers\",        returning: null, }\n      insert_swapper_matches: db.prepare_insert { into: \"#{prefix}_html_swapper_matches\", returning: null, }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  render_dsk: ( cfg ) ->\n    { dsk     } = cfg\n    { db      } = @mrg\n    { prefix  } = @cfg\n    db.setv 'dsk', dsk\n    return ( db.all_first_values SQL\"select html from #{prefix}_html_tags_and_html;\" ).join ''\n\n  #---------------------------------------------------------------------------------------------------------\n  _append_tag: ( dsk, oln, col, trk, typ, tag, syntax, atrs = null, text = null ) ->\n    atrid = null\n    if atrs?\n      { atrid } = @mrg.db.first_row @statements.insert_atrid\n      for k, v of atrs\n        v = rpr v unless isa.text v\n        @statements.insert_atr.run { atrid, k, v, }\n    return @statements.insert_content.get { dsk, oln, col, trk, typ, tag, syntax, atrid, txt: text, }\n\n  #---------------------------------------------------------------------------------------------------------\n  parse_dsk: ( cfg ) ->\n    validate.mrg_parse_dsk_cfg ( cfg = { @constructor.C.defaults.mrg_parse_dsk_cfg..., cfg..., } )\n    { dsk }                 = cfg\n    @_collect_swapper_matches { dsk, }\n    #.......................................................................................................\n    @mrg.db.with_transaction =>\n      for { oln1, wslc, trk, pce, par, txt, } from @mrg.walk_par_rows { dsk, }\n        # debug '^598^', dsk, oln1, par, rpr txt\n        tokens  = @HTMLISH.parse txt, @_get_tag_catalog()\n        oln     = null\n        col     = null\n        syntax  = null\n        #...................................................................................................\n        for d in tokens\n          oln     = oln1 + d.delta_lnr ? 0\n          col     = d.col\n          syntax  = d.syntax ? 'html'\n          switch d.$key\n            when '<tag'     then @_append_tag dsk, oln, col, trk, '<', d.name, syntax, d.atrs\n            when '>tag'     then @_append_tag dsk, oln, col, trk, '>', d.name, syntax, d.atrs\n            when '^tag'     then @_append_tag dsk, oln, col, trk, '^', d.name, syntax, d.atrs\n            when '^text'    then @_append_tag dsk, oln, col, trk, 't', null,   syntax, null, d.text\n            when '^entity'\n              @_append_tag dsk, oln, col, trk, 't', null,   syntax, null, d.text\n            when '^comment', '^doctype'\n              @_append_tag dsk, oln, col, trk, 'r', null, syntax, null, d.text.replace /^<!--\\s*(.*?)\\s*-->$/, '$1'\n            when '^error'\n              warn '^435345^', \"error #{rpr d}\"\n              atrs = { start: d.start, stop: d.stop, code: d.code, ref: d.$ ? '?', }\n              @_append_tag dsk, oln, col, trk, 'e', null, syntax, atrs, \"#{d.message}: #{rpr d.text}\"\n            else\n              warn '^435345^', \"unhandled token #{rpr d}\"\n              atrs  = { start: d.start, stop: d.stop, code: 'unhandled', ref: '^mirage-html@4^', }\n              d     = { $key: d.$key, name: d.name, type: d.type, }\n              @_append_tag dsk, oln, col, trk, 'e', null, syntax, atrs, \"unhandled token: #{rpr d}\"\n        #...................................................................................................\n        oln    ?= oln1\n        col    ?= 1\n        syntax ?= 'html'\n        for _ in [ 1 .. wslc + 1 ]\n          @_append_tag dsk, oln, col, trk, 'b', null, syntax, null, '\\n'\n    return null\n\n\n  #=========================================================================================================\n  # SYNTAX FENCES\n  #---------------------------------------------------------------------------------------------------------\n  _walk_pattern_matches: ( text, pattern ) ->\n    for match from text.matchAll pattern\n      yield { start: match.index, stop: match.index + match[ 0 ].length, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_zone_candidates: ( text ) ->\n    R = []\n    for swapper, d of @_swapper_catalog\n      { syntax\n        open\n        close\n        either } = d\n      if either?\n        R.push { swapper, syntax, role: 'either', hit..., } for hit from @_walk_pattern_matches text, either\n      else\n        R.push { swapper, syntax, role: 'open',   hit..., } for hit from @_walk_pattern_matches text, open\n        R.push { swapper, syntax, role: 'close',  hit..., } for hit from @_walk_pattern_matches text, close\n    R.sort ( a, b ) ->\n      return +1 if a.start > b.start\n      return -1 if a.start < b.start\n      return +1 if a.stop  > b.stop\n      return -1 if a.stop  < b.stop\n      return  0\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _collect_swapper_matches: ( cfg ) ->\n    { dsk }           = cfg\n    cache             = []\n    ### TAINT should be a stack to allow for multiply nested syntaxes ###\n    current_swapper   = null\n    for { oln, trk, pce, txt, } from @mrg.walk_line_rows { dsk, }\n        for d in @_get_zone_candidates txt\n          { role\n            swapper\n            start\n            stop  } = d\n          swapper   = @_swapper_catalog[ swapper ]\n          if current_swapper?\n            if role is 'either'\n              if current_swapper is swapper.name\n                current_swapper = null\n                role            = 'close'\n              else\n                continue\n            else\n              continue unless ( swapper.name is current_swapper ) and ( role is 'close' )\n              current_swapper = null\n          else\n            if role is 'either'\n              current_swapper = swapper.name\n              role            = 'open'\n            else\n              continue unless ( role is 'open' )\n              current_swapper = swapper.name\n          cache.push { dsk, oln, trk, pce, start, stop, role, swapper: swapper.name, }\n    #.......................................................................................................\n    @mrg.db @statements.insert_swapper_matches, row for row in cache\n    cache.length = 0\n    #.......................................................................................................\n    return null\n\n\n\n"
  ]
}