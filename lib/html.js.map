{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/html.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-MIRAGE/HTML'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nGUY                       = require 'guy'\n{ HTMLISH: ITXH }         = require 'intertext'\n{ HDML }                  = require 'hdml'\n\n\n#===========================================================================================================\ntypes.declare 'constructor_cfg', tests:\n  \"@isa.object x\":                                    ( x ) -> @isa.object x\n  \"( @isa.object x.mrg ) or ( @isa.function x.mrg \":  ( x ) -> ( @isa.object x.mrg ) or ( @isa.function x.mrg )\n\n\n\n\n#===========================================================================================================\nclass @Html\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: GUY.lft.freeze\n    defaults:\n      #.....................................................................................................\n      constructor_cfg:\n        mrg:              null\n        prefix:           null\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg      = { @constructor.C.defaults.constructor_cfg..., cfg..., }\n    GUY.props.hide @, 'types', types\n    @types.validate.constructor_cfg @cfg\n    { mrg, }  = GUY.obj.pluck_with_fallback @cfg, null, 'mrg'\n    GUY.props.hide @, 'mrg', mrg\n    @cfg      = GUY.lft.freeze @cfg\n    @_set_variables?()\n    @_create_sql_functions?()\n    @_procure_infrastructure?()\n    @_compile_statements?()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _set_variables: ->\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    { prefix } = @cfg\n    #-------------------------------------------------------------------------------------------------------\n    @mrg.db.create_window_function\n      name:           \"#{prefix}_html_create_tag\"\n      varargs:        false\n      deterministic:  true\n      start:          null\n      step:           ( Σ, sgl, tag, k, v ) ->\n        Σ            ?= { sgl, tag, atrs: {}, }\n        Σ.atrs[ k ]   = v if k?\n        return Σ\n      inverse:        ( Σ, dropped ) -> return null unless Σ?; delete Σ.atrs[ k ]; Σ\n      result:         ( Σ ) -> return '' unless Σ?; HDML.create_tag Σ.sgl, Σ.tag, Σ.atrs\n    #-------------------------------------------------------------------------------------------------------\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _procure_infrastructure: ->\n    ### TAINT skip if tables found ###\n    { prefix  } = @cfg\n    { db      } = @mrg\n    db SQL\"\"\"\n      drop view  if exists #{prefix}_html_tags_and_html;\n      drop table if exists #{prefix}_html_atrs;\n      drop table if exists #{prefix}_html_mirror;\n      drop table if exists #{prefix}_html_atrids;\n      drop table if exists #{prefix}_html_datasources;\"\"\"\n    #-------------------------------------------------------------------------------------------------------\n    db SQL\"\"\"\n      create table #{prefix}_html_atrids (\n          atrid integer not null,\n        primary key ( atrid ) );\"\"\"\n    db SQL\"\"\"\n      create table #{prefix}_html_atrs (\n          atrid integer not null,\n          k     text    not null,\n          v     text    not null,\n        primary key ( atrid, k ),\n        foreign key ( atrid ) references #{prefix}_html_atrids );\"\"\"\n    db SQL\"\"\"\n      create table #{prefix}_html_mirror (\n          dsk   text    not null,\n          tid   integer not null,\n          sgl   text    not null,      -- sigil, one of `<`, `>`, `^`\n          tag   text    not null,      -- use '$text' for text nodes\n          atrid integer,\n          text  text,\n        primary key ( dsk, tid ),\n        foreign key ( dsk   ) references #{prefix}_html_datasources,\n        foreign key ( atrid ) references #{prefix}_html_atrids );\"\"\"\n    db SQL\"\"\"\n      create table #{prefix}_html_datasources (\n          dsk     text not null,\n          url     text not null,\n          digest  text default null,\n        primary key ( dsk ) );\"\"\"\n    db SQL\"\"\"\n      create view #{prefix}_html_tags_and_html as select distinct\n          t.tid                                                     as tid,\n          t.sgl                                                     as sgl,\n          t.tag                                                     as tag,\n          t.atrid                                                   as atrid,\n          case t.tag when '$text' then t.text\n          else #{prefix}_html_create_tag( t.sgl, t.tag, a.k, a.v ) over w end  as xxx\n        from\n          #{prefix}_html_mirror as t\n          left join #{prefix}_html_atrs as a using ( atrid )\n        where true\n          and ( t.dsk = std_getv( 'dsk' ) )\n        window w as (\n          partition by t.tid\n          order by a.k\n          rows between unbounded preceding and unbounded following )\n        order by tid;\"\"\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_statements: ->\n    { prefix  } = @cfg\n    { db      } = @mrg\n    #.......................................................................................................\n    GUY.props.hide @, 'statements',\n      insert_atrid:      db.prepare_insert {\n        into: \"#{prefix}_html_atrids\", returning: '*', exclude: [ 'atrid', ], }\n      ### NOTE we don't use `autoincrement` b/c this is the more general solution; details will change when\n      the VNR gets more realistic (dsk, linenr, ...) ###\n      insert_content:    db.prepare SQL\"\"\"\n        with v1 as ( select coalesce( max( tid ), 0 ) + 1 as tid from #{prefix}_html_mirror where dsk = $dsk )\n        insert into #{prefix}_html_mirror ( dsk, tid, sgl, tag, atrid, text )\n          values ( $dsk, ( select tid from v1 ), $sgl, $tag, $atrid, $text )\n          returning *;\"\"\"\n      insert_atr:        db.prepare_insert { into: \"#{prefix}_html_atrs\",         returning: null, }\n      insert_datasource: db.prepare_insert { into: \"#{prefix}_html_datasources\",  returning: '*', }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _append_tag: ( dsk, sgl, tag, atrs = null, text = null ) ->\n    atrid = null\n    if text?\n      validate.null atrs\n    else if atrs?\n      validate.null text\n      { atrid } = @mrg.db.first_row @statements.insert_atrid\n      for k, v of atrs\n        v = rpr v unless isa.text v\n        @statements.insert_atr.run { atrid, k, v, }\n    urge @mrg.db.first_row @statements.insert_content, { dsk, sgl, tag, atrid, text, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  render_dsk: ( cfg ) ->\n    { dsk     } = cfg\n    { db      } = @mrg\n    { prefix  } = @cfg\n    db.setv 'dsk', dsk\n    return ( db.all_first_values SQL\"select xxx from #{prefix}_html_tags_and_html;\" ).join ''\n\n"
  ]
}