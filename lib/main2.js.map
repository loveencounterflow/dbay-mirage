{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main2.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-MIRAGE'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nGUY                       = require 'guy'\n{ HTMLISH: ITXH }         = require 'intertext'\n\n\n#===========================================================================================================\ntypes.declare 'constructor_cfg', tests:\n  \"@isa.object x\":                                  ( x ) -> @isa.object x\n  \"( @isa.object x.db ) or ( @isa.function x.db \":  ( x ) -> ( @isa.object x.db ) or ( @isa.function x.db )\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'mrg_refresh_datasource_cfg', tests:\n  \"@isa.object x\":                ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.dsk\":     ( x ) -> @isa.nonempty_text x.dsk\n  \"@isa.boolean x.force\":         ( x ) -> @isa.boolean x.force\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'mrg_append_to_loc_cfg', tests:\n  \"@isa.object x\":                ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.dsk\":     ( x ) -> @isa.nonempty_text x.dsk\n  \"@isa.text x.text\":             ( x ) -> @isa.text x.text\n  \"@isa.boolean x.nl\":            ( x ) -> @isa.boolean x.nl\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'mrg_walk_line_rows_cfg', tests:\n  \"@isa.object x\":                      ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.dsk\":           ( x ) -> @isa.nonempty_text x.dsk\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'mrg_walk_par_rows_cfg', tests:\n  \"@isa.object x\":                      ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.dsk\":           ( x ) -> @isa.nonempty_text x.dsk\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'mrg_set_active_cfg', tests:\n  \"@isa.object x\":                      ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.dsk\":           ( x ) -> @isa.nonempty_text x.dsk\n  \"@isa_optional.integer x.lnr\":        ( x ) -> @isa_optional.integer x.lnr\n  \"@isa_optional.integer x.trk\":        ( x ) -> @isa_optional.integer x.trk\n  \"@isa_optional.integer x.pce\":        ( x ) -> @isa_optional.integer x.pce\n\n\n\n#===========================================================================================================\nclass @Mrg\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: GUY.lft.freeze\n    defaults:\n      #.....................................................................................................\n      constructor_cfg:\n        db:               null\n        prefix:           'mrg'\n      #.....................................................................................................\n      mrg_refresh_datasource_cfg:\n        dsk:              null\n        force:            false\n      #.....................................................................................................\n      mrg_append_to_loc_cfg:\n        dsk:              null\n        text:             null\n        nl:               true\n      #.....................................................................................................\n      mrg_walk_line_rows_cfg:\n        dsk:              null\n      #.....................................................................................................\n      mrg_walk_par_rows_cfg:\n        dsk:              null\n      #.....................................................................................................\n      mrg_set_active_cfg:\n        dsk:              null\n        lnr:              null\n        trk:              null\n        pce:              null\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg    = { @constructor.C.defaults.constructor_cfg..., cfg..., }\n    GUY.props.hide @, 'types', types\n    @types.validate.constructor_cfg @cfg\n    { db, } = GUY.obj.pluck_with_fallback @cfg, null, 'db'\n    GUY.props.hide @, 'db', db\n    @cfg    = GUY.lft.freeze @cfg\n    @db.create_stdlib()\n    @_set_variables?()\n    @_create_sql_functions?()\n    @_compile_sql?()\n    @_procure_infrastructure?()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _set_variables: ->\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    { prefix } = @cfg\n    #-------------------------------------------------------------------------------------------------------\n    @db.create_function\n      name:           prefix + '_re_is_blank'\n      deterministic:  true\n      varargs:        false\n      call:           ( txt ) -> if ( /^\\s*$/.test txt ) then 1 else 0\n    #-------------------------------------------------------------------------------------------------------\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _procure_infrastructure: ->\n    ### TAINT skip if tables found ###\n    { prefix } = @cfg\n    @db SQL\"\"\"\n      drop view   if exists #{prefix}_paragraph_linenumbers;\n      drop view   if exists #{prefix}_lines;\n      drop view   if exists #{prefix}_location_from_dsk_locid;\n      drop view   if exists #{prefix}_prv_nxt_xtra_from_dsk_locid;\n      drop table  if exists #{prefix}_locs;\n      drop table  if exists #{prefix}_mirror;\n      drop table  if exists #{prefix}_datasources;\"\"\"\n    #-------------------------------------------------------------------------------------------------------\n    # TABLES\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_datasources (\n          dsk     text not null,\n          path    text not null,\n          digest  text default null,\n        primary key ( dsk ) );\"\"\"\n    #.......................................................................................................\n    ### TAINT need to indicate column nr for fine-grained source locations ###\n    @db SQL\"\"\"\n      create table #{prefix}_mirror (\n          dsk     text    not null,           -- data source key\n          lnr     integer not null,           -- line nr (1-based)\n          trk     integer not null default 1, -- track number\n          pce     integer not null default 1, -- piece number\n          act     boolean not null default 1, -- true: active, false: deleted\n          blk     boolean not null generated always as ( #{prefix}_re_is_blank( txt ) ) virtual,\n          txt     text    not null,\n        foreign key ( dsk ) references #{prefix}_datasources,\n        primary key ( dsk, lnr, trk, pce ) );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      -- thx to https://github.com/loveencounterflow/gaps-and-islands#the-gaps-and-islands-pattern\n      create view #{prefix}_paragraph_linenumbers as with t as ( select\n          dsk                                 as dsk,\n          lnr - ( dense_rank() over w ) + 1   as par,\n          lnr                                 as lnr\n        from #{prefix}_mirror\n        where not blk\n        window w as (\n          partition by dsk\n          order by lnr ) )\n      select\n          dsk         as dsk,\n          par         as par,\n          min( lnr )  as lnr1,\n          max( lnr )  as lnr2\n        from   t\n        group by par\n        order by lnr1;\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view #{prefix}_parmirror as select\n          dsk                                                   as dsk,\n          lnr                                                   as lnr,\n          trk                                                   as trk,\n          pce                                                   as pce,\n          act                                                   as act,\n          -- blk                                                   as blk,\n          ( select\n                p.par as par\n              from #{prefix}_paragraph_linenumbers as p\n              where m.lnr between p.lnr1 and p.lnr2 limit 1 )   as par,\n          txt                                                   as txt\n        from #{prefix}_mirror as m\n        -- where not blk\n        order by dsk, lnr, trk, pce;\"\"\"\n      # #.......................................................................................................\n    # @db SQL\"\"\"\n    #   create table #{prefix}_refs (\n    #       dsk     text    not null,           -- data source key\n    #       lnr     integer not null,           -- line nr (1-based)\n    #       trk     integer not null default 1, -- track number\n    #       pce     integer not null default 1, -- piece number\n\n    #       sdsk     text    not null,           -- data source key\n    #       slnr     integer not null,           -- line nr (1-based)\n    #       strk     integer not null default 1, -- track number\n    #       spce     integer not null default 1, -- piece number\n\n    #     foreign key ( dsk ) references #{prefix}_datasources,\n    #     primary key ( dsk, lnr, trk, pce ) );\"\"\"\n    #-------------------------------------------------------------------------------------------------------\n    # VIEWS\n    #.......................................................................................................\n    # @db SQL\"\"\"\n    #   -- needs variables 'dsk', 'locid'\n    #   create view #{prefix}_prv_nxt_xtra_from_dsk_locid as\n    #     with r2 as ( select\n    #         lnr,\n    #         pce,\n    #         props,\n    #         del\n    #       from #{prefix}_location_from_dsk_locid )\n    #     select\n    #       std_assert(\n    #         r1.dsk,\n    #         '^#{prefix}_location_from_dsk_locid@546^' ||\n    #         ' unknown locid ' || quote( std_getv( 'locid' ) ) )   as dsk,\n    #       std_getv( 'locid' )                                     as locid,\n    #       r1.lnr                                                  as lnr,\n    #       r1.pce                                               as pce,\n    #       r2.props                                                as props,\n    #       r2.del                                                  as del,\n    #       min( r1.trk ) - 1                                      as prv_xtra,\n    #       max( r1.trk ) + 1                                      as nxt_xtra\n    #     from\n    #       #{prefix}_mirror as r1, r2\n    #     where true\n    #       and ( r1.dsk     = std_getv( 'dsk' ) )\n    #       and ( r1.lnr     = r2.lnr            )\n    #       and ( r1.pce  = r2.pce         )\n    #     limit 1;\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      -- needs variables 'dsk'\n      create view #{prefix}_lines as select distinct\n          r1.dsk                                              as dsk,\n          r1.lnr                                              as lnr,\n          r1.par                                              as par,\n          coalesce( group_concat( r1.txt, '' ) over w, '' )   as txt\n        from #{prefix}_parmirror as r1\n        where true\n          and ( r1.dsk = std_getv( 'dsk' ) )\n          and ( r1.act )\n        window w as (\n          partition by r1.lnr\n          order by r1.lnr, r1.trk, r1.pce\n          range between unbounded preceding and unbounded following );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      -- needs variables 'dsk'\n      create view #{prefix}_pars as select distinct\n          r1.dsk                                                as dsk,\n          r2.lnr1                                               as lnr1,\n          r2.lnr2                                               as lnr2,\n          r1.par                                                as par,\n          coalesce( group_concat( r1.txt, '\\n' ) over w, '' )   as txt\n        from #{prefix}_parmirror as r1\n        join #{prefix}_paragraph_linenumbers as r2 using ( dsk, par )\n        where true\n          and ( r1.dsk = std_getv( 'dsk' ) )\n          and ( r1.act )\n        window w as (\n          partition by r1.par\n          order by r1.lnr, r1.trk, r1.pce\n          range between unbounded preceding and unbounded following );\"\"\"\n    #-------------------------------------------------------------------------------------------------------\n    # TRIGGERS\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create trigger #{prefix}_before_delete_on_mirror before delete on #{prefix}_mirror\n        begin\n          select case when old.trk = 1 and not std_getv( 'allow_change_on_mirror' ) then\n          raise( fail, '^mirage@1^ not allowed to modify table #{prefix}_mirror for trk = 1' ) end;\n          end;\"\"\"\n    @db SQL\"\"\"\n      create trigger #{prefix}_before_insert_on_mirror before insert on #{prefix}_mirror\n        begin\n          select case when new.trk = 1 and not std_getv( 'allow_change_on_mirror' ) then\n          raise( fail, '^mirage@2^ not allowed to modify table #{prefix}_mirror for trk = 1' ) end;\n          end;\"\"\"\n    @db SQL\"\"\"\n      create trigger #{prefix}_before_update_on_mirror before update on #{prefix}_mirror\n        begin\n          select case when old.trk = 1 and not std_getv( 'allow_change_on_mirror' ) then\n          raise( fail, '^mirage@3^ not allowed to modify table #{prefix}_mirror for trk = 1' ) end;\n          end;\"\"\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    { prefix } = @cfg\n    #.......................................................................................................\n    GUY.props.hide @, 'sql',\n      #.....................................................................................................\n      get_db_object_count:  SQL\"\"\"\n        select count(*) as count from sqlite_schema where starts_with( $name, $prefix || '_' );\"\"\"\n      #.....................................................................................................\n      ds_entry_from_dsk:  SQL\"\"\"\n        select * from #{prefix}_datasources where dsk = $dsk;\"\"\"\n      #.....................................................................................................\n      update_digest: SQL\"\"\"\n        update #{prefix}_datasources set digest = $digest where dsk = $dsk;\"\"\"\n      #.....................................................................................................\n      delete_lines: SQL\"\"\"\n        delete from #{prefix}_mirror where dsk = $dsk;\"\"\"\n      #.....................................................................................................\n      upsert_datasource: @db.create_insert {\n        into:   prefix + '_datasources',\n        fields: [ 'dsk', 'path', ],\n        on_conflict: { update: true, }, }\n      #.....................................................................................................\n      insert_line: @db.create_insert {\n        into:       prefix + '_mirror',\n        fields:     [ 'dsk', 'lnr', 'txt', ], }\n      #.....................................................................................................\n      insert_lnpart: @db.create_insert {\n        into:       prefix + '_mirror',\n        fields:     [ 'dsk', 'lnr', 'trk', 'pce', 'txt', ], }\n      #.....................................................................................................\n      insert_xtra: @db.create_insert {\n        into:       prefix + '_mirror',\n        fields:     [ 'dsk', 'lnr', 'pce', 'xtra', 'txt', ],\n        returning:  '*', }\n      #.....................................................................................................\n      insert_xtra_using_dsk_locid: SQL\"\"\"\n        -- needs variables 'dsk', 'locid'\n        -- unfortunately, got to repeat the `std_assert()` call here\n        insert into #{prefix}_mirror ( dsk, lnr, pce, xtra, txt )\n          select\n              $dsk                                                    as dsk,\n              std_assert(\n                lnr,\n                '^insert_xtra_using_dsk_locid@546^' ||\n                ' unknown locid ' || quote( std_getv( 'locid' ) ) )   as lnr,\n              pce                                                     as pce,\n              nxt_xtra                                                as nxt_xtra,\n              $txt                                                    as txt\n            from #{prefix}_prv_nxt_xtra_from_dsk_locid\n          returning *;\"\"\"\n      #.....................................................................................................\n      insert_locid: @db.create_insert {\n        into:       prefix + '_locs',\n        fields:     [ 'dsk', 'lnr', 'pce', 'props', 'del', ], }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  register_dsk: ( cfg ) ->\n    @db @sql.upsert_datasource, cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _ds_entry_from_dsk: ( dsk ) -> @db.single_row @sql.ds_entry_from_dsk, { dsk, }\n  _update_digest: ( dsk, digest ) -> @db @sql.update_digest, { dsk, digest, }\n  _delete_lines: ( dsk ) -> @db @sql.delete_lines, { dsk, }\n\n  #---------------------------------------------------------------------------------------------------------\n  refresh_datasource: ( cfg ) ->\n    @db.setv 'allow_change_on_mirror', 1\n    try\n      R = @_refresh_datasource cfg\n    finally\n      @db.setv 'allow_change_on_mirror', 0\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _refresh_datasource: ( cfg ) ->\n    validate.mrg_refresh_datasource_cfg ( cfg = { @constructor.C.defaults.mrg_refresh_datasource_cfg..., cfg..., } )\n    { dsk\n      force       } = cfg\n    { prefix      } = @cfg\n    { path\n      digest      } = @_ds_entry_from_dsk dsk\n    current_digest  = GUY.fs.get_content_hash path\n    counts          = { files: 0, bytes: 0, }\n    #.......................................................................................................\n    if force or ( digest isnt current_digest )\n      #.....................................................................................................\n      @db =>\n        @_delete_lines dsk\n        insert_line   = @db.prepare @sql.insert_line\n        lnr           = 0\n        #...................................................................................................\n        for line from GUY.fs.walk_lines path, { decode: false, }\n          lnr++\n          counts.bytes   += line.length\n          txt             = line.toString 'utf-8'\n          insert_line.run { dsk, lnr, txt, }\n        #...................................................................................................\n        counts.files++\n        @_update_digest dsk, current_digest\n        return null\n    #.......................................................................................................\n    return counts\n\n\n  #=========================================================================================================\n  # CONTENT RETRIEVAL\n  #---------------------------------------------------------------------------------------------------------\n  get_text:       ( cfg ) -> ( d.line for d from @walk_line_rows cfg ).join '\\n'\n  get_line_rows:  ( cfg ) -> [ ( @walk_line_rows cfg )..., ]\n\n  #---------------------------------------------------------------------------------------------------------\n  walk_line_rows: ( cfg ) ->\n    validate.mrg_walk_line_rows_cfg ( cfg = { @constructor.C.defaults.mrg_walk_line_rows_cfg..., cfg..., } )\n    { dsk       } = cfg\n    { prefix    } = @cfg\n    @db.setv 'dsk',       dsk\n    return @db SQL\"select * from #{prefix}_lines;\"\n\n  #---------------------------------------------------------------------------------------------------------\n  walk_par_rows: ( cfg ) ->\n    validate.mrg_walk_par_rows_cfg ( cfg = { @constructor.C.defaults.mrg_walk_par_rows_cfg..., cfg..., } )\n    { dsk       } = cfg\n    { prefix    } = @cfg\n    @db.setv 'dsk',       dsk\n    return @db SQL\"select * from #{prefix}_pars;\"\n\n  #---------------------------------------------------------------------------------------------------------\n  activate:   ( cfg ) -> @_set_active { cfg..., act: true, }\n  deactivate: ( cfg ) -> @_set_active { cfg..., act: false, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _set_active: ( cfg ) ->\n    validate.mrg_set_active_cfg ( cfg = { @constructor.C.defaults.mrg_set_active_cfg..., cfg..., } )\n    { dsk\n      lnr\n      trk\n      pce\n      act } = cfg\n    act     = if act then 1 else 0\n    sql     = SQL\"update mrg_mirror set act = $act where ( dsk = $dsk )\"\n    sql    += SQL\" and ( lnr = $lnr )\" if lnr?\n    sql    += SQL\" and ( trk = $trk )\" if trk?\n    sql    += SQL\" and ( pce = $pce )\" if pce?\n    sql    += SQL\";\"\n    debug '^33490^', rpr sql\n    ( @db.prepare sql ).run { dsk, lnr, trk, pce, act, }\n    return null\n\n  #=========================================================================================================\n  # CONTENT MANIPULATION\n  #---------------------------------------------------------------------------------------------------------\n  # append_to_loc: ( cfg ) ->\n    # validate.mrg_append_to_loc_cfg ( cfg = { @constructor.C.defaults.mrg_append_to_loc_cfg..., cfg..., } )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  ]
}