{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/htmlish-parser.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,SAAA,EAAA,UAAA,EAAA,QAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,OADF,EAEE,QAFF,EAGE,gBAHF,CAAA,GAG4B,KAAK,CAAC,MAAN,CAAA,CAH5B;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,QAAA,GAA4B,CAAE,OAAA,CAAQ,8BAAR,CAAF,CAA0C,CAAC,WAA3C,CAAuD;IAAE,IAAA,EAAM;EAAR,CAAvD;;EAC5B,CAAA,CAAE,IAAF,EACE,MADF,EAEE,IAFF,CAAA,GAE4B,GAAG,CAAC,GAFhC;;EAGA,UAAA,GAA4B,OAAA,CAAQ,YAAR;;EAC5B,CAAA,CAAE,SAAF,CAAA,GAA4B,OAAA,CAAQ,WAAR,CAA5B;;EACA,CAAA,CAAE,CAAF,CAAA,GAA4B,SAA5B,EA3BA;;;;;;EAkCA,IAAA,GAAgB,CAAA;;EAChB,IAAI,CAAC,KAAL,GAAkB,yBAAkD,CAAC;;EACrE,IAAI,CAAC,MAAL,GAAkB,iCAAkD,CAAC;;EACrE,IAAI,CAAC,IAAL,GAAkB,2BAAkD,CAAC;;EACrE,IAAI,CAAC,IAAL,GAAkB,gBAAkD,CAAC;;EACrE,IAAI,CAAC,OAAL,GAAgB,MAAA,CAAA,CAAA,EAAA,CAAA,CAAU,IAAI,CAAC,KAAf,CAAA,GAAA,CAAA,CAA8B,IAAI,CAAC,MAAnC,CAAA,MAAA,CAAA,CAAoD,IAAI,CAAC,IAAzD,CAAA,CAAA,CAAA,CAAmE,IAAI,CAAC,IAAxE,CAAA,GAAA,CAAA;;EAChB,IAAI,CAAC,QAAL,GAAgB,cAxChB;;;EA4CM,IAAC,CAAA;IAAP,MAAA,QAAA,CAAA;;;;;;MAWE,OAAS,CAAE,IAAF,CAAA;AACX,YAAA,MAAA,EAAA,OAAA,EAAA,GAAA;;;;QAGI,MAAA,GAAY;QACZ,OAAA,GAAY;QACZ,GAAA,GAAY,IAAI,UAAU,CAAC,UAAf,CAA0B,CAAE,MAAF,EAAU,OAAV,CAA1B;QACZ,GAAG,CAAC,UAAJ,CAAe,UAAU,CAAC,OAAO,CAAC,cAAlC,EANJ;;QAQI,IAAA,GAAY,GAAG,CAAC,IAAJ,CAAS,IAAT;AACZ,eAAO;UAAE,IAAF;UAAQ,MAAA,EAAU,GAAG,CAAC,MAAM,CAAC,IAAX,CAAgB,GAAhB;QAAlB;MAVA,CATX;;;MAsBE,wBAA0B,CAAE,CAAF,EAAK,KAAL,EAAY,IAAZ,EAAkB,KAAlB,CAAA;AAC5B,YAAA,CAAA,EAAA,CAAA,EAAA;QAAI,CAAA,GAAY,KAAK,CAAC;QAClB,CAAA,GAAY,CAAE,GAAA,CAAF;QACZ,CAAC,CAAC,IAAF,GAAY;QACZ,CAAC,CAAC,IAAF,GAAY,KAAK,CAAE,CAAF;QACjB,CAAC,CAAC,KAAF,GAAY;QACZ,CAAC,CAAC,IAAF,GAAY;QACZ,IAAG,cAAH;UACE,CAAC,CAAC,IAAF,GAAY;UACZ,CAAC,CAAC,IAAF,GAAY,CAAC,CAAC,KAFhB;SAAA,MAAA;UAIE,CAAC,CAAC,IAAF,GAAe,aAAH,GAAe,MAAf,GAA2B;UACvC,IAAqB,aAArB;YAAA,CAAC,CAAC,GAAF,GAAY,CAAC,CAAC,IAAd;;UACA,CAAC,CAAC,MAAF,GAAY,QAAA,iCAAiB,CAAC,CAAC,GAAnB,EAAwB,CAAK,aAAH,GAAe,EAAf,GAAuB,EAAzB,CAAxB,EANd;;AAOA,eAAO;MAdiB,CAtB5B;;;MAuCE,qBAAuB,CAAE,CAAF,EAAK,KAAL,EAAY,IAAZ,EAAkB,IAAlB,CAAA;AACzB,YAAA;QAAI,CAAA,GAAU,CAAE,GAAA,CAAF;QACV,CAAC,CAAC,IAAF,GAAU;QACV,CAAC,CAAC,KAAF,GAAU;QACV,CAAC,CAAC,IAAF,GAAU;AACV,eAAO;MALc,CAvCzB;;;MA+CE,aAAe,CAAA,CAAA;eAAG,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;AACpB,cAAA,GAAA,EAAA,GAAA,EAAA;UAAI,CAAE,GAAF,EACE,GADF,CAAA,oCACyB,CAAE,IAAF,EAAQ,IAAR;UACzB,CAAC,CAAC,SAAF,GAAgB,GAAA,GAAM;UACtB,CAAC,CAAC,GAAF,GAAgB;iBAChB,IAAA,CAAK,CAAL;QALgB;MAAH,CA/CjB;;;MAuDE,sBAAwB,CAAE,aAAF,CAAA;AAC1B,YAAA;QAAI,aAAA,GAAgB;AAChB,eAAO,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;AACX,cAAA;UAAM,IAAG,qBAAH;;YAEE,IAAG,CAAE,CAAC,CAAC,IAAF,KAAU,MAAZ,CAAA,IAAyB,CAAE,CAAC,CAAC,IAAF,KAAU,aAAZ,CAA5B;cACE,aAAA,GAAgB;AAChB,qBAAO,IAAA,CAAK,CAAL,EAFT;aADR;;YAKQ,CAAA,GAAI,CAAE,GAAA,CAAF;YACJ,CAAC,CAAC,IAAF,GAAU;YACV,OAAO,CAAC,CAAC;AACT,mBAAO,IAAA,CAAK,CAAL,EATT;WAAN;;UAWM,IAAG,CAAE,CAAC,CAAC,IAAF,KAAU,MAAZ,CAAA,IAAyB,CAAE,aAAa,CAAC,GAAd,CAAkB,CAAC,CAAC,IAApB,CAAF,CAA5B;YACE,aAAA,GAAgB,CAAC,CAAC,KADpB;WAXN;;iBAcM,IAAA,CAAK,CAAL;QAfK;MAFe,CAvD1B;;;MA2EE,WAAa,CAAA,CAAA;AACf,YAAA,YAAA,EAAA;QAAI,YAAA,GAAgB,IAAC,CAAA,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC;QACpC,aAAA,GAAgB,IAAC,CAAA,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC;AACpC,eAAO,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;AACX,cAAA,CAAA,EAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA;UAAM,KAAqB,CAAE,CAAC,CAAC,IAAF,KAAU,OAAZ,CAArB;AAAA,mBAAO,IAAA,CAAK,CAAL,EAAP;;UACA,KAAA,GAAY,CAAC,CAAC,IAAI,CAAC,KAAP,CAAa,aAAb;UACZ,MAAqB,KAAK,CAAC,MAAN,GAAe,EAApC;AAAA,mBAAO,IAAA,CAAK,CAAL,EAAP;;UACA,SAAA,GAAY;UACZ,KAAA,GAAY,EAJlB;;UAMM,KAAA,uCAAA;;YACE,SAAA,GAAY,CAAI;YAChB,IAAY,IAAA,KAAQ,EAApB;AAAA,uBAAA;;YACA,IAAA,GAAY,KAAA,GAAQ,IAAI,CAAC,OAFjC;;YAIQ,IAAG,SAAA,IAAc,4CAAjB;cACE,IAAA,CAAK,IAAC,CAAA,wBAAD,CAA0B,CAA1B,EAA6B,KAA7B,EAAoC,IAApC,EAA0C,KAA1C,CAAL,EADF;aAAA,MAAA;cAGE,IAAA,CAAK,IAAC,CAAA,qBAAD,CAAuB,CAAvB,EAA0B,KAA1B,EAAiC,IAAjC,EAAuC,IAAvC,CAAL,EAHF;aAJR;;YASQ,KAAA,GAAQ;UAVV;AAWA,iBAAO;QAlBF;MAHI,CA3Ef;;;MAmGE,yBAA2B,CAAA,CAAA;eAAG,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;UAC5B,KAAqB,CAAE,CAAC,CAAC,IAAF,KAAU,OAAZ,CAArB;AAAA,mBAAO,IAAA,CAAK,CAAL,EAAP;WAAJ;;UAEI,IAAK,CAAC,CAAC,IAAF,KAAU,OAAf;YACE,IAAK,aAAa,CAAC,IAAd,CAAmB,CAAC,CAAC,IAArB,CAAL;cACE,IAAC,CAAA,SAAD,CAAW,CAAX,EAAc,MAAd,EAAsB,WAAtB,EAAmC,wBAAnC,EADF;aADF;WAFJ;;iBAMI,IAAA,CAAK,CAAL;QAP4B;MAAH,CAnG7B;;;MA6GE,qBAAuB,CAAE,MAAF,CAAA;eAAc,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;UACnC,MAAqB,CAAE,CAAC,CAAC,IAAF,KAAU,OAAZ,CAAA,IAAyB,CAAE,CAAC,CAAC,IAAF,KAAU,UAAZ,EAA9C;AAAA,mBAAO,IAAA,CAAK,CAAL,EAAP;;UACA,CAAC,CAAC,IAAF,GAAS,MAAA,CAAO,CAAC,CAAC,IAAT;iBACT,IAAA,CAAK,CAAL;QAHmC;MAAd,CA7GzB;;;MAmHE,mBAAqB,CAAA,CAAA;eAAG,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;UACtB,KAAqB,CAAE,CAAC,CAAC,IAAF,KAAU,OAAZ,CAArB;AAAA,mBAAO,IAAA,CAAK,CAAL,EAAP;;UACA,CAAC,CAAC,IAAF,GAAS,CAAC,CAAC,IAAI,CAAC,OAAP,CAAe,MAAf,EAA2B,MAA3B;AAAmC,0DAC5C,CAAC,CAAC,IAAF,GAAS,CAAC,CAAC,IAAI,CAAC,OAAP,CAAe,MAAf,EAA2B,OAA3B;AAAmC,0DAC5C,CAAC,CAAC,IAAF,GAAS,CAAC,CAAC,IAAI,CAAC,OAAP,CAAe,SAAf,EAA2B,EAA3B;AAAiC,oEAC1C,CAAC,CAAC,IAAF,GAAS,CAAC,CAAC,IAAI,CAAC,OAAP,CAAe,UAAf,EAA2B,IAA3B;AAAiC,2EAC1C,IAAA,CAAK,CAAL;QANsB;MAAH,CAnHvB;;;MA4HE,0BAA4B,CAAA,CAAA;eAAG,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;UAC7B,KAAqB,CAAE,CAAC,CAAC,IAAF,KAAU,MAAZ,CAArB;AAAA,mBAAO,IAAA,CAAK,CAAL,EAAP;;UACA,IAAG,CAAE,CAAC,CAAC,IAAF,KAAU,MAAZ,CAAA,IAAyB,CAAE,OAAO,CAAC,IAAR,CAAa,CAAC,CAAC,IAAf,CAAF,CAA5B;YACE,IAAC,CAAA,SAAD,CAAW,CAAX,EAAc,MAAd,EAAsB,SAAtB,EAAiC,uCAAjC,EADF;;iBAEA,IAAA,CAAK,CAAL;QAJ6B;MAAH,CA5H9B;;;MAmIE,0BAA4B,CAAA,CAAA;eAAG,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;UAC7B,KAAqB,CAAE,CAAC,CAAC,IAAF,KAAU,MAAZ,CAArB;AAAA,mBAAO,IAAA,CAAK,CAAL,EAAP;;UACA,IAAG,CAAE,CAAC,CAAC,IAAF,KAAU,MAAZ,CAAA,IAAyB,CAAE,CAAE,YAAY,CAAC,IAAb,CAAkB,CAAC,CAAC,IAApB,CAAF,CAAA,IAAgC,CAAE,YAAY,CAAC,IAAb,CAAkB,CAAC,CAAC,IAApB,CAAF,CAAlC,CAA5B;YACE,IAAC,CAAA,SAAD,CAAW,CAAX,EAAc,MAAd,EAAsB,SAAtB,EAAiC,sCAAjC,EADF;;iBAEA,IAAA,CAAK,CAAL;QAJ6B;MAAH,CAnI9B;;;MA0IE,kBAAoB,CAAE,KAAF,CAAA;eAAa,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;UAC/B,IAAkB,CAAC,CAAC,IAAF,KAAU,MAA5B;YAAA,KAAK,CAAC,IAAN,CAAW,CAAX,EAAA;;iBACA,IAAA,CAAK,CAAL;QAF+B;MAAb,CA1ItB;;;MA+IE,mBAAqB,CAAE,KAAF,CAAA;eAAa,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;AACpC,cAAA;UACI,KAAqB,CAAE,CAAC,CAAC,IAAF,KAAU,MAAZ,CAArB;;AAAA,mBAAO,IAAA,CAAK,CAAL,EAAP;WADJ;;UAGI,IAAG,KAAK,CAAC,MAAN,KAAgB,CAAnB;AACE,mBAAO,IAAA,CAAK,IAAC,CAAA,SAAD,CAAW,CAAX,EAAc,MAAd,EAAsB,UAAtB,EAAkC,CAAA,yBAAA,CAAA,CAA4B,CAAC,CAAC,IAA9B,CAAA,CAAA,CAAlC,CAAL,EADT;WAHJ;;UAMI,UAAA,GAAa,KAAK,CAAC,GAAN,CAAA;UACb,IAAG,cAAH;YACE,IAAK,CAAC,CAAC,IAAF,KAAU,UAAU,CAAC,IAA1B;AACE,qBAAO,IAAA,CAAK,IAAC,CAAA,SAAD,CAAW,CAAX,EAAc,MAAd,EAAsB,SAAtB,EAAiC,CAAA,WAAA,CAAA,CAAc,UAAU,CAAC,IAAzB,CAAA,SAAA,CAAA,CAAyC,CAAC,CAAC,IAA3C,CAAA,CAAA,CAAjC,CAAL,EADT;aADF;WAAA,MAAA;;YAKE,CAAC,CAAC,IAAF,GAAS,UAAU,CAAC,KALtB;;iBAMA,IAAA,CAAK,CAAL;QAdgC;MAAb,CA/IvB;;;MAgKE,iBAAmB,CAAA,CAAA;eAAG,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;UACpB,IAAoB,CAAC,CAAC,IAAF,KAAU,UAA9B;YAAA,CAAC,CAAC,IAAF,GAAS,QAAT;;iBACA,IAAA,CAAK,CAAL;QAFoB;MAAH,CAhKrB;;;MAqKE,kBAAoB,CAAA,CAAA;AACtB,YAAA,SAAA,EAAA,KAAA,EAAA,IAAA,EAAA;QAAI,IAAA,GAAgB,MAAA,CAAO,MAAP,EAApB;;QAEI,IAAA,GAAgB;QAChB,SAAA,GAAgB,GAHpB;;QAKI,KAAA,GAAQ,QAAA,CAAA,CAAA;AACZ,cAAA,CAAA,EAAA,CAAA;;UACM,IAAU,SAAS,CAAC,MAAV,KAAoB,CAA9B;AAAA,mBAAA;;UACA,CAAA,GAAI,SAAS,CAAG,CAAH;UACb,IAAG,SAAS,CAAC,MAAV,GAAmB,CAAtB;YACE,CAAC,CAAC,IAAF,GAAU;;AAAE;cAAA,KAAA,2CAAA;;6BAAA,CAAC,CAAC;cAAF,CAAA;;gBAAF,CAA6B,CAAC,IAA9B,CAAmC,EAAnC;YACV,CAAC,CAAC,IAAF,GAAU,SAAS,CAAE,SAAS,CAAC,MAAV,GAAmB,CAArB,CAAwB,CAAC,KAF9C;;UAGA,IAAA,CAAK,CAAL;iBACA,SAAS,CAAC,MAAV,GAAoB;QARd,EALZ;;AAeI,eAAO,CAAA,CAAE,CAAE,IAAF,CAAF,EAAa,QAAA,CAAE,CAAF,EAAK,KAAL,CAAA;UAClB,IAAA,GAAO;UACP,IAAkB,CAAA,KAAK,IAAvB;AAAA,mBAAO,KAAA,CAAA,EAAP;;UACA,IAAO,CAAC,CAAC,IAAF,KAAU,OAAjB;YACE,KAAA,CAAA;AACA,mBAAO,IAAA,CAAK,CAAL,EAFT;;iBAGA,SAAS,CAAC,IAAV,CAAe,CAAf;QANkB,CAAb;MAhBW,CArKtB;;;MA8LE,YAAc,CAAA,CAAA;eAAG,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;AACnB,cAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA;UAAI,KAAqB,CAAE,CAAC,CAAC,IAAF,KAAU,OAAZ,CAArB;AAAA,mBAAO,IAAA,CAAK,CAAL,EAAP;;UACA,MAAqB,CAAE,KAAA,GAAQ,CAAC,CAAC,IAAI,CAAC,KAAP,CAAa,IAAb,CAAV,CAA6B,CAAC,MAA9B,GAAuC,EAA5D;AAAA,mBAAO,IAAA,CAAK,CAAL,EAAP;;UACA,CAAA,GAAI,EAFR;;UAII,KAAA,mDAAA;;YACE,CAAA,GAAU,CAAE,GAAA,CAAF;YACV,CAAC,CAAC,GAAF,IAAU;YACV,IAAmB,GAAA,KAAO,CAA1B;cAAA,CAAC,CAAC,GAAF,GAAU,EAAV;;YACA,CAAC,CAAC,IAAF,GAAU;YACV,IAAA,CAAK,CAAL;UALF;AAMA,iBAAO;QAXQ;MAAH,CA9LhB;;;MA4ME,KAAO,CAAE,IAAF,EAAQ,gBAAgB,IAAxB,CAAA;AACT,YAAA,CAAA,EAAA,EAAA,EAAA,MAAA,EAAA,KAAA,EAAA;QAEI,CAAA,CAAE,IAAF,EACE,MADF,CAAA,GACgB,IAAC,CAAA,OAAD,CAAS,IAAT,CADhB;QAEA,MAAA,GAAgB,IAAA,CAAK,QAAQ,CAAC,KAAT,CAAe,IAAf,CAAL;QAChB,KAAA,GAAgB;QAChB,CAAA,GAAgB;QAChB,EAAA,GAAgB,IAAI,SAAJ,CAAA,EAPpB;;QASI,EAAE,CAAC,IAAH,CAAQ,MAAR;QACA,EAAE,CAAC,IAAH,CAAQ,IAAC,CAAA,aAAD,CAAA,CAAR;QACA,IAAyD,qBAAzD;UAAA,EAAE,CAAC,IAAH,CAAQ,IAAC,CAAA,sBAAD,CAAgC,aAAhC,CAAR,EAAA;;QACA,EAAE,CAAC,IAAH,CAAQ,IAAC,CAAA,WAAD,CAAA,CAAR;QACA,EAAE,CAAC,IAAH,CAAQ,IAAC,CAAA,yBAAD,CAAA,CAAR;QACA,EAAE,CAAC,IAAH,CAAQ,IAAC,CAAA,qBAAD,CAAgC,MAAhC,CAAR;QACA,EAAE,CAAC,IAAH,CAAQ,IAAC,CAAA,mBAAD,CAAA,CAAR;QACA,EAAE,CAAC,IAAH,CAAQ,IAAC,CAAA,0BAAD,CAAA,CAAR;QACA,EAAE,CAAC,IAAH,CAAQ,IAAC,CAAA,0BAAD,CAAA,CAAR;QACA,EAAE,CAAC,IAAH,CAAQ,IAAC,CAAA,kBAAD,CAAgC,KAAhC,CAAR;QACA,EAAE,CAAC,IAAH,CAAQ,IAAC,CAAA,mBAAD,CAAgC,KAAhC,CAAR;QACA,EAAE,CAAC,IAAH,CAAQ,IAAC,CAAA,iBAAD,CAAA,CAAR,EApBJ;;;QAuBI,EAAE,CAAC,IAAH,CAAQ,QAAA,CAAE,CAAF,CAAA;iBAAS,CAAC,CAAC,IAAF,CAAO,CAAP;QAAT,CAAR;QACA,EAAE,CAAC,KAAH,CAAA;AACA,eAAO;MA1BF,CA5MT;;;MAyOE,SAAW,CAAE,KAAF,EAAS,GAAT,EAAc,IAAd,EAAoB,OAApB,CAAA;QACT,KAAK,CAAC,IAAN,GAAgB;QAChB,KAAK,CAAC,MAAN,GAAgB;QAChB,KAAK,CAAC,IAAN,GAAgB;QAChB,KAAK,CAAC,OAAN,GAAgB;QAChB,KAAK,CAAC,CAAN,GAAgB;AAChB,eAAO;MANE;;IA3Ob;;;IAGE,OAAC,CAAA,CAAD,GAAI,GAAG,CAAC,GAAG,CAAC,MAAR,CACF;MAAA,IAAA,EAAM;IAAN,CADE;;;;gBA/CN;;;EAgSA,IAAC,CAAA,OAAD,GAAW,OAAA,GAAU,IAAI,IAAC,CAAA,OAAL,CAAA;AAhSrB",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-MIRAGE/HTMLISH-PARSER'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nGUY                       = require 'guy'\n_HTMLISH                  = ( require 'paragate/lib/htmlish.grammar' ).new_grammar { bare: true, }\n{ lets\n  freeze\n  thaw }                  = GUY.lft\nTIMETUNNEL                = require 'timetunnel'\n{ Moonriver }             = require 'moonriver'\n{ $ }                     = Moonriver\n\n\n#===========================================================================================================\n### TAINT use more relaxed syntax for names ###\n# G: grouped\n# O: optional\nxncr          = {}\nxncr.nameG    = ( ///     (?<name>      [a-z][a-z0-9]* )       /// ).source\nxncr.nameOG   = ( /// (?: (?<csg>   (?: [a-z][a-z0-9]* ) ) | ) /// ).source\nxncr.hexG     = ( /// (?:     x  (?<hex> [a-fA-F0-9]+ )      ) /// ).source\nxncr.decG     = ( ///            (?<dec> [      0-9]+ )        /// ).source\nxncr.matcher  = /// ^ & #{xncr.nameG} ; | & #{xncr.nameOG} \\# (?: #{xncr.hexG} | #{xncr.decG} ) ; $ ///\nxncr.splitter = /// ( & [^\\s;]+ ; ) ///\n\n\n#===========================================================================================================\nclass @Htmlish\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: GUY.lft.freeze\n    xncr: xncr\n\n  # #---------------------------------------------------------------------------------------------------------\n  # constructor: ->\n  #   return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _tunnel: ( text ) ->\n    ### TAINT do not reconstruct tunnel for each call ###\n    # guards    = 'äöüßp'\n    # guards    = '①②③④⑤'\n    guards    = '¥₽₨฿₮'\n    intalph   = '0123456789'\n    tnl       = new TIMETUNNEL.Timetunnel { guards, intalph, }\n    tnl.add_tunnel TIMETUNNEL.tunnels.keep_backslash\n    # tnl.add_tunnel TIMETUNNEL.tunnels.remove_backslash\n    text      = tnl.hide text\n    return { text, reveal: ( tnl.reveal.bind tnl ), }\n\n  #---------------------------------------------------------------------------------------------------------\n  _entity_token_from_match: ( d, start, stop, match ) ->\n    g         = match.groups\n    R         = { d..., }\n    R.$key    = '^entity'\n    R.text    = match[ 0 ]\n    R.start   = start\n    R.stop    = stop\n    if g.name?\n      R.type    = 'named'\n      R.name    = g.name\n    else\n      R.type    = if g.csg? then 'xncr' else 'ncr'\n      R.csg     = g.csg if g.csg?\n      R.$value  = parseInt g.hex ? g.dec, ( if g.hex? then 16 else 10 )\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _text_token_from_part: ( d, start, stop, part ) ->\n    R       = { d..., }\n    R.text  = part\n    R.start = start\n    R.stop  = stop\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  $add_location: -> ( d, send ) =>\n    [ lnr\n      col       ] = d.$vnr ? [ null, null, ]\n    d.delta_lnr   = lnr - 1\n    d.col         = col\n    send d\n\n  #---------------------------------------------------------------------------------------------------------\n  $filter_nonhtml_syntax: ( non_html_tags ) ->\n    wait_for_name = null\n    return ( d, send ) =>\n      if wait_for_name?\n        #...................................................................................................\n        if ( d.$key is '>tag' ) and ( d.name is wait_for_name )\n          wait_for_name = null\n          return send d\n        #...................................................................................................\n        e = { d..., }\n        e.$key  = '^rawtext'\n        delete e.atrs\n        return send e\n      #.....................................................................................................\n      if ( d.$key is '<tag' ) and ( non_html_tags.has d.name )\n        wait_for_name = d.name\n      #.....................................................................................................\n      send d\n\n  #---------------------------------------------------------------------------------------------------------\n  $parse_ncrs: ->\n    xncr_matcher  = @constructor.C.xncr.matcher\n    xncr_splitter = @constructor.C.xncr.splitter\n    return ( d, send ) =>\n      return send d unless ( d.$key is '^text' )\n      parts     = d.text.split xncr_splitter\n      return send d unless parts.length > 1\n      is_entity = true\n      start     = 0\n      #.....................................................................................................\n      for part in parts\n        is_entity = not is_entity\n        continue if part is ''\n        stop      = start + part.length\n        #...................................................................................................\n        if is_entity and ( match = part.match xncr_matcher )?\n          send @_entity_token_from_match d, start, stop, match\n        else\n          send @_text_token_from_part d, start, stop, part\n        #...................................................................................................\n        start = stop\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $complain_about_bareachrs: -> ( d, send ) =>\n    return send d unless ( d.$key is '^text' )\n    #.....................................................................................................\n    if ( d.$key is '^text' )\n      if ( /(?<!\\\\)[<&]/.test d.text )\n        @_as_error d, '^ð1^', 'bareachrs', \"bare active characters\"\n    #.....................................................................................................\n    send d\n\n  #---------------------------------------------------------------------------------------------------------\n  $reveal_tunneled_text: ( reveal ) -> ( d, send ) =>\n    return send d unless ( d.$key is '^text' ) or ( d.$key is '^rawtext' )\n    d.text = reveal d.text\n    send d\n\n  #---------------------------------------------------------------------------------------------------------\n  $remove_backslashes: -> ( d, send ) =>\n    return send d unless ( d.$key is '^text' )\n    d.text = d.text.replace /\\\\</g,     '&lt;'  ### TAINT conflicts with NCR parsing ###\n    d.text = d.text.replace /\\\\&/g,     '&amp;' ### TAINT conflicts with NCR parsing ###\n    d.text = d.text.replace /\\\\\\n/ugs,  ''    ### replace escaped newlines with empty string ###\n    d.text = d.text.replace /\\\\(.)/ugs, '$1'  ### obliterate remaining backslashes (exc. escaped ones) ###\n    send d\n\n  #---------------------------------------------------------------------------------------------------------\n  $treat_xws_in_opening_tags: -> ( d, send ) =>\n    return send d unless ( d.$key is '<tag' )\n    if ( d.type is 'otag' ) and ( /^<\\s+/.test d.text )\n      @_as_error d, '^ð1^', 'xtraows', \"extraneous whitespace before tag name\"\n    send d\n\n  #---------------------------------------------------------------------------------------------------------\n  $treat_xws_in_closing_tags: -> ( d, send ) =>\n    return send d unless ( d.$key is '>tag' )\n    if ( d.type is 'ctag' ) and ( ( /^<\\s*\\/\\s+/.test d.text ) or ( /^<\\s+\\/\\s*/.test d.text ) )\n      @_as_error d, '^ð2^', 'xtracws', \"extraneous whitespace in closing tag\"\n    send d\n\n  #---------------------------------------------------------------------------------------------------------\n  $handle_stack_open: ( stack ) -> ( d, send ) =>\n    stack.push d if ( d.$key is '<tag' ) # and ( d.type is 'ctag' )\n    send d\n\n  #---------------------------------------------------------------------------------------------------------\n  $handle_stack_close: ( stack ) -> ( d, send ) =>\n    # debug '^398^', stack\n    return send d unless ( d.$key is '>tag' )\n    #.....................................................................................................\n    if stack.length is 0\n      return send @_as_error d, '^ð2^', 'xtractag', \"extraneous closing tag </#{d.name}>\"\n    #.....................................................................................................\n    matching_d = stack.pop()\n    if d.name?\n      if ( d.name != matching_d.name )\n        return send @_as_error d, '^ð2^', 'nomatch', \"expected </#{matching_d.name}>, got </#{d.name}>\"\n    #...................................................................................................\n    else\n      d.name = matching_d.name\n    send d\n\n  #---------------------------------------------------------------------------------------------------------\n  $relabel_rawtexts: -> ( d, send ) ->\n    d.$key = '^text' if d.$key is '^rawtext'\n    send d\n\n  #---------------------------------------------------------------------------------------------------------\n  $consolidate_texts: ->\n    last          = Symbol 'last'\n    # prv_was_text  = false\n    send          = null\n    collector     = []\n    #.......................................................................................................\n    flush = ->\n      # prv_was_text      = false\n      return if collector.length is 0\n      d = collector[  0 ]\n      if collector.length > 1\n        d.text  = ( e.text for e in collector ).join ''\n        d.stop  = collector[ collector.length - 1 ].stop\n      send d\n      collector.length  = 0\n    #.......................................................................................................\n    return $ { last, }, ( d, _send ) ->\n      send = _send\n      return flush() if d is last\n      unless d.$key is '^text'\n        flush()\n        return send d\n      collector.push d\n\n  #---------------------------------------------------------------------------------------------------------\n  $split_lines: -> ( d, send ) =>\n    return send d unless ( d.$key is '^text' )\n    return send d unless ( lines = d.text.split '\\n' ).length > 1\n    e = d\n    ### TAINT makes `start`, `stop` invalid (but are thery still needed?) ###\n    for line, idx in lines\n      e       = { e..., }\n      e.oln  += idx\n      e.col   = 1 unless idx is 0\n      e.text  = line\n      send e\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  parse: ( text, non_html_tags = null ) ->\n    ### TAINT use `cfg` pattern ###\n    ### TAINT do not reconstruct pipeline on each run ###\n    { text\n      reveal  }   = @_tunnel text\n    tokens        = thaw _HTMLISH.parse text\n    stack         = []\n    R             = []\n    mr            = new Moonriver()\n    #-------------------------------------------------------------------------------------------------------\n    mr.push tokens\n    mr.push @$add_location()\n    mr.push @$filter_nonhtml_syntax         non_html_tags if non_html_tags?\n    mr.push @$parse_ncrs()\n    mr.push @$complain_about_bareachrs()\n    mr.push @$reveal_tunneled_text          reveal\n    mr.push @$remove_backslashes()\n    mr.push @$treat_xws_in_opening_tags()\n    mr.push @$treat_xws_in_closing_tags()\n    mr.push @$handle_stack_open             stack\n    mr.push @$handle_stack_close            stack\n    mr.push @$relabel_rawtexts()\n    # mr.push @$consolidate_texts()\n    # mr.push @$split_lines()\n    mr.push ( d ) -> R.push d\n    mr.drive()\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _as_error: ( token, ref, code, message ) ->\n    token.$key    = '^error'\n    token.origin  = 'htmlish'\n    token.code    = code\n    token.message = message\n    token.$       = ref\n    return token\n\n#-----------------------------------------------------------------------------------------------------------\n@HTMLISH = HTMLISH = new @Htmlish()\n\n"
  ]
}